import{_ as a,c as n,e,o as p}from"./app-CNYnZXky.js";const l={};function t(i,s){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="lab1实验报告" tabindex="-1"><a class="header-anchor" href="#lab1实验报告"><span>Lab1实验报告</span></a></h1><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><h3 id="thinking-1-1" tabindex="-1"><a class="header-anchor" href="#thinking-1-1"><span>Thinking 1.1</span></a></h3><p><strong>分别使用x86-64原生工具链和交叉编译工具链，重复编译和解析过程。</strong></p><p>首先创建一个 <code>example.c</code> 文件，内容如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用 <code>gcc</code> 将该文件编译为可执行文件：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">gcc example.c <span class="token parameter variable">-o</span> example</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在编译过程中 <code>gcc</code> 会自动调用 <code>ld</code> 链接器生成最终的可执行文件。</p><p>或者也可以手动链接，依次执行下面的命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">gcc <span class="token parameter variable">-c</span> example.c <span class="token parameter variable">-o</span> example.o</span>
<span class="line">ld <span class="token parameter variable">-o</span> example_ld example.o /usr/lib/x86_64-linux-gnu/crt1.o /usr/lib/x86_64-linux-gnu/crti.o /usr/lib/x86_64-linux-gnu/crtn.o <span class="token parameter variable">-lc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的程序将标准运行时文件和标准库文件与 <code>example.o</code> 链接到一起。</p><p>工具 <code>ld</code> 的用法如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 链接目标文件生成可执行文件</span></span>
<span class="line">ld <span class="token parameter variable">-o</span> output example1.o example2.o</span>
<span class="line"><span class="token comment"># 链接共享库生成可执行文件</span></span>
<span class="line">ld <span class="token parameter variable">-o</span> output main.o <span class="token parameter variable">-lmylib</span> -L/path/to/mylib</span>
<span class="line"><span class="token comment"># 生成共享库</span></span>
<span class="line">ld <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> libmylib.so obj1.o obj2.o</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过不建议手动调用 <code>ld</code> 命令，通常使用 <code>gcc</code> 等编译器自动调用 <code>ld</code> 命令，手动使用 <code>ld</code> 命令会比较繁琐。</p><p>接下来使用 <code>objdump</code> 命令对 <code>example</code> 可执行文件和 <code>example.o</code> 目标文件进行反汇编：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">objdump <span class="token parameter variable">-DS</span> example.o <span class="token operator">&gt;</span> example_o.dump</span>
<span class="line">objdump <span class="token parameter variable">-DS</span> example <span class="token operator">&gt;</span> example.dump</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，最终的可执行文件相比于可重定位目标文件，文件字节数增加，相应的地址也已经由 <code>0</code> 被替换为实际的地址。</p><p>命令 <code>objdump</code> 接收的参数如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">-a, --archive-headers    <span class="token comment"># Display archive header information</span></span>
<span class="line">-f, --file-headers       <span class="token comment"># Display the contents of the overall file header</span></span>
<span class="line">-p, --private-headers    <span class="token comment"># Display object format specific file header contents</span></span>
<span class="line">-P, <span class="token parameter variable">--private</span><span class="token operator">=</span>OPT,OPT<span class="token punctuation">..</span>. <span class="token comment"># Display object format specific contents</span></span>
<span class="line">-h, --<span class="token punctuation">[</span>section-<span class="token punctuation">]</span>headers  <span class="token comment"># Display the contents of the section headers</span></span>
<span class="line">-x, --all-headers        <span class="token comment"># Display the contents of all headers</span></span>
<span class="line">-d, <span class="token parameter variable">--disassemble</span>        <span class="token comment"># Display assembler contents of executable sections</span></span>
<span class="line">-D, --disassemble-all    <span class="token comment"># Display assembler contents of all sections</span></span>
<span class="line">    <span class="token parameter variable">--disassemble</span><span class="token operator">=</span><span class="token operator">&lt;</span>sym<span class="token operator">&gt;</span>  <span class="token comment"># Display assembler contents from &lt;sym&gt;</span></span>
<span class="line">-S, <span class="token parameter variable">--source</span>             <span class="token comment"># Intermix source code with disassembly</span></span>
<span class="line">    --source-comment<span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>txt<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token comment"># Prefix lines of source code with &lt;txt&gt;</span></span>
<span class="line">-s, --full-contents      <span class="token comment"># Display the full contents of all sections requested</span></span>
<span class="line">-g, <span class="token parameter variable">--debugging</span>          <span class="token comment"># Display debug information in object file</span></span>
<span class="line">-e, --debugging-tags     <span class="token comment"># Display debug information using ctags style</span></span>
<span class="line">-G, <span class="token parameter variable">--stabs</span>              <span class="token comment"># Display (in raw form) any STABS info in the file</span></span>
<span class="line">-W<span class="token punctuation">[</span>lLiaprmfFsoRtUuTgAckK<span class="token punctuation">]</span> or</span>
<span class="line">--dwarf<span class="token punctuation">[</span><span class="token operator">=</span>rawline,<span class="token operator">=</span>decodedline,<span class="token operator">=</span>info,<span class="token operator">=</span>abbrev,<span class="token operator">=</span>pubnames,<span class="token operator">=</span>aranges,<span class="token operator">=</span>macro,<span class="token operator">=</span>frames,</span>
<span class="line">        <span class="token operator">=</span>frames-interp,<span class="token operator">=</span>str,<span class="token operator">=</span>loc,<span class="token operator">=</span>Ranges,<span class="token operator">=</span>pubtypes,</span>
<span class="line">        <span class="token operator">=</span>gdb_index,<span class="token operator">=</span>trace_info,<span class="token operator">=</span>trace_abbrev,<span class="token operator">=</span>trace_aranges,</span>
<span class="line">        <span class="token operator">=</span>addr,<span class="token operator">=</span>cu_index,<span class="token operator">=</span>links,<span class="token operator">=</span>follow-links<span class="token punctuation">]</span></span>
<span class="line">                         <span class="token comment"># Display DWARF info in the file</span></span>
<span class="line"><span class="token parameter variable">--ctf</span><span class="token operator">=</span>SECTION            <span class="token comment"># Display CTF info from SECTION</span></span>
<span class="line">-t, <span class="token parameter variable">--syms</span>               <span class="token comment"># Display the contents of the symbol table(s)</span></span>
<span class="line">-T, --dynamic-syms       <span class="token comment"># Display the contents of the dynamic symbol table</span></span>
<span class="line">-r, <span class="token parameter variable">--reloc</span>              <span class="token comment"># Display the relocation entries in the file</span></span>
<span class="line">-R, --dynamic-reloc      <span class="token comment"># Display the dynamic relocation entries in the file</span></span>
<span class="line">@<span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                  <span class="token comment"># Read options from &lt;file&gt;</span></span>
<span class="line">-v, <span class="token parameter variable">--version</span>            <span class="token comment"># Display this program&#39;s version number</span></span>
<span class="line">-i, <span class="token parameter variable">--info</span>               <span class="token comment"># List object formats and architectures supported</span></span>
<span class="line">-H, <span class="token parameter variable">--help</span>               <span class="token comment"># Display this information</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以上面的示例中的 <code>-DS</code> 意为显示所有节的汇编内容，并且将源码和汇编码混合对比显示。</p><p>接下来使用 <code>readelf</code> 命令对可执行文件和可重定位目标文件的ELF进行分析，该命令的参数如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token parameter variable">-a</span> <span class="token parameter variable">--all</span>               Equivalent to: <span class="token parameter variable">-h</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">-S</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-V</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-I</span></span>
<span class="line"><span class="token parameter variable">-h</span> --file-header       Display the ELF <span class="token function">file</span> header</span>
<span class="line"><span class="token parameter variable">-l</span> --program-headers   Display the program headers</span>
<span class="line">   <span class="token parameter variable">--segments</span>          An <span class="token builtin class-name">alias</span> <span class="token keyword">for</span> --program-headers</span>
<span class="line"><span class="token parameter variable">-S</span> --section-headers   Display the sections&#39; header</span>
<span class="line">   <span class="token parameter variable">--sections</span>          An <span class="token builtin class-name">alias</span> <span class="token keyword">for</span> --section-headers</span>
<span class="line"><span class="token parameter variable">-g</span> --section-groups    Display the section <span class="token function">groups</span></span>
<span class="line"><span class="token parameter variable">-t</span> --section-details   Display the section details</span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token parameter variable">--headers</span>           Equivalent to: <span class="token parameter variable">-h</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">-S</span></span>
<span class="line"><span class="token parameter variable">-s</span> <span class="token parameter variable">--syms</span>              Display the symbol table</span>
<span class="line">   <span class="token parameter variable">--symbols</span>           An <span class="token builtin class-name">alias</span> <span class="token keyword">for</span> <span class="token parameter variable">--syms</span></span>
<span class="line">--dyn-syms             Display the dynamic symbol table</span>
<span class="line"><span class="token parameter variable">-n</span> <span class="token parameter variable">--notes</span>             Display the core notes <span class="token punctuation">(</span>if present<span class="token punctuation">)</span></span>
<span class="line"><span class="token parameter variable">-r</span> <span class="token parameter variable">--relocs</span>            Display the relocations <span class="token punctuation">(</span>if present<span class="token punctuation">)</span></span>
<span class="line"><span class="token parameter variable">-u</span> <span class="token parameter variable">--unwind</span>            Display the unwind info <span class="token punctuation">(</span>if present<span class="token punctuation">)</span></span>
<span class="line"><span class="token parameter variable">-d</span> <span class="token parameter variable">--dynamic</span>           Display the dynamic section <span class="token punctuation">(</span>if present<span class="token punctuation">)</span></span>
<span class="line"><span class="token parameter variable">-V</span> --version-info      Display the version sections <span class="token punctuation">(</span>if present<span class="token punctuation">)</span></span>
<span class="line"><span class="token parameter variable">-A</span> --arch-specific     Display architecture specific information <span class="token punctuation">(</span>if any<span class="token punctuation">)</span></span>
<span class="line"><span class="token parameter variable">-c</span> --archive-index     Display the symbol/file index <span class="token keyword">in</span> an archive</span>
<span class="line"><span class="token parameter variable">-D</span> --use-dynamic       Use the dynamic section info when displaying symbols</span>
<span class="line"><span class="token parameter variable">-x</span> --hex-dump<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span></span>
<span class="line">                       Dump the contents of section <span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span> as bytes</span>
<span class="line"><span class="token parameter variable">-p</span> --string-dump<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span></span>
<span class="line">                       Dump the contents of section <span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span> as strings</span>
<span class="line"><span class="token parameter variable">-R</span> --relocated-dump<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span></span>
<span class="line">                       Dump the contents of section <span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span> as relocated bytes</span>
<span class="line"><span class="token parameter variable">-z</span> <span class="token parameter variable">--decompress</span>        Decompress section before dumping it</span>
<span class="line">-w<span class="token punctuation">[</span>lLiaprmfFsoRtUuTgAckK<span class="token punctuation">]</span> or</span>
<span class="line">--debug-dump<span class="token punctuation">[</span><span class="token operator">=</span>rawline,<span class="token operator">=</span>decodedline,<span class="token operator">=</span>info,<span class="token operator">=</span>abbrev,<span class="token operator">=</span>pubnames,<span class="token operator">=</span>aranges,<span class="token operator">=</span>macro,<span class="token operator">=</span>frames,</span>
<span class="line">             <span class="token operator">=</span>frames-interp,<span class="token operator">=</span>str,<span class="token operator">=</span>loc,<span class="token operator">=</span>Ranges,<span class="token operator">=</span>pubtypes,</span>
<span class="line">             <span class="token operator">=</span>gdb_index,<span class="token operator">=</span>trace_info,<span class="token operator">=</span>trace_abbrev,<span class="token operator">=</span>trace_aranges,</span>
<span class="line">             <span class="token operator">=</span>addr,<span class="token operator">=</span>cu_index,<span class="token operator">=</span>links,<span class="token operator">=</span>follow-links<span class="token punctuation">]</span></span>
<span class="line">                       Display the contents of DWARF debug sections</span>
<span class="line">--dwarf-depth<span class="token operator">=</span>N        Do not display DIEs at depth N or greater</span>
<span class="line">--dwarf-start<span class="token operator">=</span>N        Display DIEs starting with N, at the same depth</span>
<span class="line">                       or deeper</span>
<span class="line"><span class="token parameter variable">--ctf</span><span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span>    Display CTF info from section <span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span></span>
<span class="line">--ctf-parent<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span></span>
<span class="line">                       Use section <span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span> as the CTF parent</span>
<span class="line">--ctf-symbols<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span></span>
<span class="line">                       Use section <span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span> as the CTF external symtab</span>
<span class="line">--ctf-strings<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span></span>
<span class="line">                       Use section <span class="token operator">&lt;</span>number<span class="token operator">|</span>name<span class="token operator">&gt;</span> as the CTF external strtab</span>
<span class="line"><span class="token parameter variable">-I</span> <span class="token parameter variable">--histogram</span>         Display histogram of bucket list lengths</span>
<span class="line"><span class="token parameter variable">-W</span> <span class="token parameter variable">--wide</span>              Allow output width to exceed <span class="token number">80</span> characters</span>
<span class="line">@<span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                Read options from <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span></span>
<span class="line"><span class="token parameter variable">-H</span> <span class="token parameter variable">--help</span>              Display this information</span>
<span class="line"><span class="token parameter variable">-v</span> <span class="token parameter variable">--version</span>           Display the version number of readelf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用 <code>-a</code> 来输出所有ELF信息：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">readelf <span class="token parameter variable">-a</span> example</span>
<span class="line">readelf <span class="token parameter variable">-a</span> example.o</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来使用 <code>mips-linux-gnu-gcc</code> 交叉编译工具链，依次执行如下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">mips-linux-gnu-gcc example.c <span class="token parameter variable">-o</span> example_cross</span>
<span class="line">mips-linux-gnu-gcc <span class="token parameter variable">-c</span> example.c <span class="token parameter variable">-o</span> example_cross.o</span>
<span class="line">readelf <span class="token parameter variable">-a</span> example_cross.o</span>
<span class="line">readelf <span class="token parameter variable">-a</span> example_cross</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就完成了使用交叉编译工具链编译和解析的工作。</p><h3 id="thinking-1-2" tabindex="-1"><a class="header-anchor" href="#thinking-1-2"><span>Thinking 1.2</span></a></h3><p><strong>使用手动编写的 <code>readelf</code> 程序解析 <code>target/mos</code> 内核程序。</strong></p><p>在 <code>tools/readelf</code> 路径下执行如下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">./readelf <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/target/mos</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在本机的运行结果为：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">0:0x0</span>
<span class="line">1:0x80020000</span>
<span class="line">2:0x80021920</span>
<span class="line">3:0x80021938</span>
<span class="line">4:0x80021950</span>
<span class="line">5:0x0</span>
<span class="line">6:0x0</span>
<span class="line">7:0x0</span>
<span class="line">8:0x0</span>
<span class="line">9:0x0</span>
<span class="line">10:0x0</span>
<span class="line">11:0x0</span>
<span class="line">12:0x0</span>
<span class="line">13:0x0</span>
<span class="line">14:0x0</span>
<span class="line">15:0x0</span>
<span class="line">16:0x0</span>
<span class="line">17:0x0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么我们编写的 <code>readelf</code> 程序不能解析 <code>readelf</code> 文件本身而系统工具 <code>readelf</code> 则可以解析？</strong></p><p>在编写 <code>readelf.c</code> 时可以发现，我们使用的结构体中的变量均为三十二位变量：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> e_ident<span class="token punctuation">[</span>EI_NIDENT<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Magic number and other info */</span></span>
<span class="line">        Elf32_Half e_type<span class="token punctuation">;</span>                <span class="token comment">/* Object file type */</span></span>
<span class="line">        Elf32_Half e_machine<span class="token punctuation">;</span>             <span class="token comment">/* Architecture */</span></span>
<span class="line">        Elf32_Word e_version<span class="token punctuation">;</span>             <span class="token comment">/* Object file version */</span></span>
<span class="line">        Elf32_Addr e_entry<span class="token punctuation">;</span>               <span class="token comment">/* Entry point virtual address */</span></span>
<span class="line">        Elf32_Off e_phoff<span class="token punctuation">;</span>                <span class="token comment">/* Program header table file offset */</span></span>
<span class="line">        Elf32_Off e_shoff<span class="token punctuation">;</span>                <span class="token comment">/* Section header table file offset */</span></span>
<span class="line">        Elf32_Word e_flags<span class="token punctuation">;</span>               <span class="token comment">/* Processor-specific flags */</span></span>
<span class="line">        Elf32_Half e_ehsize<span class="token punctuation">;</span>              <span class="token comment">/* ELF header size in bytes */</span></span>
<span class="line">        Elf32_Half e_phentsize<span class="token punctuation">;</span>           <span class="token comment">/* Program header table entry size */</span></span>
<span class="line">        Elf32_Half e_phnum<span class="token punctuation">;</span>               <span class="token comment">/* Program header table entry count */</span></span>
<span class="line">        Elf32_Half e_shentsize<span class="token punctuation">;</span>           <span class="token comment">/* Section header table entry size */</span></span>
<span class="line">        Elf32_Half e_shnum<span class="token punctuation">;</span>               <span class="token comment">/* Section header table entry count */</span></span>
<span class="line">        Elf32_Half e_shstrndx<span class="token punctuation">;</span>            <span class="token comment">/* Section header string table index */</span></span>
<span class="line"><span class="token punctuation">}</span> Elf32_Ehdr<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        Elf32_Word p_type<span class="token punctuation">;</span>   <span class="token comment">/* Segment type */</span></span>
<span class="line">        Elf32_Off p_offset<span class="token punctuation">;</span>  <span class="token comment">/* Segment file offset */</span></span>
<span class="line">        Elf32_Addr p_vaddr<span class="token punctuation">;</span>  <span class="token comment">/* Segment virtual address */</span></span>
<span class="line">        Elf32_Addr p_paddr<span class="token punctuation">;</span>  <span class="token comment">/* Segment physical address */</span></span>
<span class="line">        Elf32_Word p_filesz<span class="token punctuation">;</span> <span class="token comment">/* Segment size in file */</span></span>
<span class="line">        Elf32_Word p_memsz<span class="token punctuation">;</span>  <span class="token comment">/* Segment size in memory */</span></span>
<span class="line">        Elf32_Word p_flags<span class="token punctuation">;</span>  <span class="token comment">/* Segment flags */</span></span>
<span class="line">        Elf32_Word p_align<span class="token punctuation">;</span>  <span class="token comment">/* Segment alignment */</span></span>
<span class="line"><span class="token punctuation">}</span> Elf32_Phdr<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且该程序没有针对三十二位ELF文件和六十四位ELF文件进行分支处理，所以该程序只能解析三十二位ELF文件，而 <code>readelf</code> 可执行程序是一个六十四位ELF文件，自然无法解析。</p><h3 id="thinking-1-3" tabindex="-1"><a class="header-anchor" href="#thinking-1-3"><span>Thinking 1.3</span></a></h3><p><strong>实验操作系统的内核入口并没有放在上电启动地址，而是按照内存布局图放置。</strong></p><p><strong>为什么这样放置内核还能保证内核入口被正确跳转到？</strong></p><p>操作系统的启动通常可以分为两个阶段，分别是引导阶段和加载阶段。</p><p>引导阶段主要任务是加载引导程序到内存中，并开始执行引导程序。加载阶段的任务是，引导加载程序加载操作系统内核程序到内存中的预定位置，然后跳转到内核程序的入口点，并开始执行内核代码。</p><p>实验操作系统采用了QEMU模拟器，由于QEMU已经提供了引导功能，不再需要实现引导程序，启动流程被简化为加载内核到内存，然后跳转到内核程序的入口。</p><p>所以在实验中，直接按照内存布局放置操作系统内核入口即可，因为QEMU模拟器会负责跳转到内核入口，不需要放在上电启动地址。</p><h2 id="难点分析" tabindex="-1"><a class="header-anchor" href="#难点分析"><span>难点分析</span></a></h2><h3 id="整体项目结构" tabindex="-1"><a class="header-anchor" href="#整体项目结构"><span>整体项目结构</span></a></h3><p>整个实验项目文件众多，读懂每个文件，理解整个项目的结构并不容易。</p><p>仅仅课程提供的模板代码及其中的注释，还有实验指导书，不足以完全理解整个项目的体系结构，还需要通过ChatGPT、GitHub和知乎等平台，查询相关的资料。读懂项目代码这一步需要主动查找资料的意识和能力，考验了学生的主观能动性。</p><p>项目文件中主要包含 <code>.c</code> 源文件、汇编语言 <code>.S</code> 文件和 <code>Makefile</code> 文件，三种语言混合，各个文件互相引用，理清项目体系结构绝非易事。</p><h3 id="elf文件分析工具" tabindex="-1"><a class="header-anchor" href="#elf文件分析工具"><span>ELF文件分析工具</span></a></h3><p>在编写 <code>readelf</code> 时，需要理解ELF文件的结构，并对 <code>Elf32_Ehdr</code> 结构体和 <code>Elf32_Shdr</code> 结构体完全理解，才能够正确编写出 <code>readelf.c</code> 文件的核心代码。</p><h3 id="输入输出函数" tabindex="-1"><a class="header-anchor" href="#输入输出函数"><span>输入输出函数</span></a></h3><p>输出功能使用的定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">fmt_callback_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">vprintfmt</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">outputk</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">printk</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">printcharc</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几个函数依次调用，需要理解这个结构，才能够完成对限时测试输入功能的编写。</p><p>输入功能使用的定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">scan_callback_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">vscanfmt</span><span class="token punctuation">(</span><span class="token class-name">scan_callback_t</span> in<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">inputk</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">scancharc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要理解输出功能的实现，考验了理解转化的能力。</p><h2 id="实验体会" tabindex="-1"><a class="header-anchor" href="#实验体会"><span>实验体会</span></a></h2><p>本次实验是整个操作系统实验的开始，此时的文件量还不是很大，做好本次实验，理解项目体系结构，才能顺利完成后续的操作系统实验。综合来看，本次实验给整个操作系统实验开了个好头。</p>`,61)]))}const o=a(l,[["render",t],["__file","lab1.html.vue"]]),r=JSON.parse('{"path":"/blogs/OS/lab1.html","title":"Lab1实验报告","lang":"en-US","frontmatter":{"categories":["OS"]},"headers":[{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[{"level":3,"title":"Thinking 1.1","slug":"thinking-1-1","link":"#thinking-1-1","children":[]},{"level":3,"title":"Thinking 1.2","slug":"thinking-1-2","link":"#thinking-1-2","children":[]},{"level":3,"title":"Thinking 1.3","slug":"thinking-1-3","link":"#thinking-1-3","children":[]}]},{"level":2,"title":"难点分析","slug":"难点分析","link":"#难点分析","children":[{"level":3,"title":"整体项目结构","slug":"整体项目结构","link":"#整体项目结构","children":[]},{"level":3,"title":"ELF文件分析工具","slug":"elf文件分析工具","link":"#elf文件分析工具","children":[]},{"level":3,"title":"输入输出函数","slug":"输入输出函数","link":"#输入输出函数","children":[]}]},{"level":2,"title":"实验体会","slug":"实验体会","link":"#实验体会","children":[]}],"git":{"createdTime":1726994140000,"updatedTime":1726994140000,"contributors":[{"name":"gitDebuger","email":"hygchn04@gmail.com","commits":1}]},"filePathRelative":"blogs/OS/lab1.md"}');export{o as comp,r as data};
