import{_ as p,c as o,a as s,b as a,d as t,e as l,o as c,r as i}from"./app-BPAT15QX.js";const r={},d={href:"https://gitee.com/openharmony-sig/arkanalyzer",target:"_blank",rel:"noopener noreferrer"},u={href:"https://neo4j.com/download/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://tinkerpop.apache.org/gremlin.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://gdotv.com/",target:"_blank",rel:"noopener noreferrer"};function m(v,n){const e=i("ExternalLinkIcon");return c(),o("div",null,[n[11]||(n[11]=s("h1",{id:"neo4j",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#neo4j"},[s("span",null,"Neo4j")])],-1)),n[12]||(n[12]=s("p",null,"Neo4j is a graph database. We will use it to store CG (Call Graph) and CFG (Control Flow Graph) generated by ArkAnalyzer.",-1)),s("p",null,[n[1]||(n[1]=a("We will develop an extension called Ark2Graph for ")),s("a",d,[n[0]||(n[0]=a("ArkAnalyzer")),t(e)]),n[2]||(n[2]=a(", and steps are as follows:"))]),n[13]||(n[13]=s("ol",null,[s("li",null,"Get CG and CFG from ArkAnalyzer."),s("li",null,"Travel the CG and CFG."),s("li",null,"Save the results into Neo4j.")],-1)),n[14]||(n[14]=s("p",null,"So it is essential to deploy a Neo4j server in the computer where we develop this extension.",-1)),n[15]||(n[15]=s("h2",{id:"_1-download-and-run-neo4j-server",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-download-and-run-neo4j-server"},[s("span",null,"1. Download and Run Neo4j Server")])],-1)),s("p",null,[n[4]||(n[4]=a("First, we can download an installer from ")),s("a",u,[n[3]||(n[3]=a("here")),t(e)]),n[5]||(n[5]=a("."))]),n[16]||(n[16]=l(`<p>Before downloading, we need to fill the form about our personal information, and then this website will display an activation key. We need to copy this key and save it into a local file.</p><p>After downloading is OK, we can run this installer to install Neo4j. Choose where we want to install this application and where we want to save data, and then the server will run automatically. Then the window of Neo4j Desktop will be open, where we can view status of this server and manage this server.</p><blockquote><p>Don&#39;t close the window of command opened automatically, or there will be some errors.</p></blockquote><h2 id="_2-connect-to-neo4j-server" tabindex="-1"><a class="header-anchor" href="#_2-connect-to-neo4j-server"><span>2. Connect to Neo4j Server</span></a></h2><h3 id="_2-1-set-username-and-password" tabindex="-1"><a class="header-anchor" href="#_2-1-set-username-and-password"><span>2.1 Set Username and Password</span></a></h3><p>First, we open Neo4j Browser from Neo4j Desktop, and then run Cypher in the console:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line">ALTER USER neo4j <span class="token keyword">SET</span> PASSWORD <span class="token string">&#39;neo4j123&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This command will change the password of user neo4j.</p><p>Or we can create a new user and grant admin privilege to it:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">CREATE</span> USER new_user <span class="token keyword">SET</span> PASSWORD <span class="token string">&#39;new_password&#39;</span> CHANGE <span class="token keyword">NOT</span> REQUIRED<span class="token punctuation">;</span></span>
<span class="line">GRANT ROLE admin TO new_user<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can use this user and password to visit http://localhost:7474 using our browser or use terminal to connect to <code>neo4j://localhost:7687</code> to connect to Neo4j server.</p><h3 id="_2-2-connect-to-neo4j-server-in-ts" tabindex="-1"><a class="header-anchor" href="#_2-2-connect-to-neo4j-server-in-ts"><span>2.2 Connect to Neo4j Server in TS</span></a></h3><p>First we need to install the driver of Neo4j:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> neo4j-driver</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then we need to edit the configuration of the Neo4j server:</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token comment"># Use 0.0.0.0 to bind to all network interfaces on the machine</span></span>
<span class="line"><span class="token key attr-name">server.default_listen_address</span><span class="token punctuation">=</span><span class="token value attr-value">0.0.0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can create a TypeScript file to test this connection:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> neo4j <span class="token keyword">from</span> <span class="token string">&quot;neo4j-driver&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// You need to change it into where your Neo4j server is running</span></span>
<span class="line"><span class="token keyword">let</span> uri <span class="token operator">=</span> <span class="token string">&quot;bolt://172.18.48.1:7687&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string">&quot;neo4j&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">&quot;neo4j123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> driver <span class="token operator">=</span> neo4j<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> neo4j<span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> session <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;CREATE (n:Person {name: $name, age: $age}) RETURN n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Neo4j&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>records<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error creating node:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    driver<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run this file and then we can see the output:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Node {</span>
<span class="line">  identity: Integer { low: 169, high: 0 },</span>
<span class="line">  labels: [ &#39;Person&#39; ],</span>
<span class="line">  properties: { name: &#39;Neo4j&#39;, age: 20 },</span>
<span class="line">  elementId: &#39;4:e920355b-215c-4a27-aaab-8d40cf5dfa18:169&#39;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-neo4j-modules" tabindex="-1"><a class="header-anchor" href="#_3-neo4j-modules"><span>3. Neo4j Modules</span></a></h2><p>Neo4j graph database consists of following modules:</p><ul><li>Node</li><li>Attribute</li><li>Relationship</li><li>Label</li><li>Data Browser</li></ul><h3 id="_3-1-node" tabindex="-1"><a class="header-anchor" href="#_3-1-node"><span>3.1 Node</span></a></h3><p>Node is the base unit of graph, which contains attributes with key-value.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">EmployeeNode <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">EmpName</span><span class="token operator">:</span> <span class="token string">&quot;Neo4j&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">EmpNumber</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">Salary</span><span class="token operator">:</span> <span class="token string">&quot;3500&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this example, the name of this node is <code>EmployeeNode</code> .</p><h3 id="_3-2-attribute" tabindex="-1"><a class="header-anchor" href="#_3-2-attribute"><span>3.2 Attribute</span></a></h3><p>Attributes is described by properties, which is <code>key-value</code> used to depict graph nodes and relationships.</p><p><code>key</code> is a string and <code>value</code> can be any type of Neo4j.</p><h3 id="_3-3-relationship" tabindex="-1"><a class="header-anchor" href="#_3-3-relationship"><span>3.3 Relationship</span></a></h3><p>Relationships connect two nodes, and each relationship contains a starting node and an ending node.</p><p>Just like attributes, relationships can also contain <code>key-value</code> properties.</p><h3 id="_3-4-label" tabindex="-1"><a class="header-anchor" href="#_3-4-label"><span>3.4 Label</span></a></h3><p>Label associates a public name with a group of nodes or relationships, and each node or relationship can contain one or more labels.</p><p>We can create a new label for nodes or relationships, and we can remove labels from nodes or relationships.</p><h3 id="_3-5-data-browser" tabindex="-1"><a class="header-anchor" href="#_3-5-data-browser"><span>3.5 Data Browser</span></a></h3><p>Data Browser is a GUI used to run cypher command and view the output, and we can use it to export the output.</p><h2 id="_4-neo4j-cql-cypher-query-language" tabindex="-1"><a class="header-anchor" href="#_4-neo4j-cql-cypher-query-language"><span>4. Neo4j CQL (Cypher Query Language)</span></a></h2><h3 id="_4-1-neo4j-data-type" tabindex="-1"><a class="header-anchor" href="#_4-1-neo4j-data-type"><span>4.1 Neo4j Data Type</span></a></h3><table><thead><tr><th style="text-align:center;">Data Type</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>boolean</code></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>byte</code></td><td style="text-align:center;"><code>int8</code></td></tr><tr><td style="text-align:center;"><code>short</code></td><td style="text-align:center;"><code>int16</code></td></tr><tr><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>int32</code></td></tr><tr><td style="text-align:center;"><code>long</code></td><td style="text-align:center;"><code>int64</code></td></tr><tr><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>float32</code></td></tr><tr><td style="text-align:center;"><code>double</code></td><td style="text-align:center;"><code>float64</code></td></tr><tr><td style="text-align:center;"><code>char</code></td><td style="text-align:center;"><code>utf-16</code></td></tr><tr><td style="text-align:center;"><code>String</code></td><td style="text-align:center;"></td></tr></tbody></table><h3 id="_4-2-create" tabindex="-1"><a class="header-anchor" href="#_4-2-create"><span>4.2 CREATE</span></a></h3><p>The <code>CREATE</code> command is used to add new nodes, relationships or entire graph structures to the database. In addition, <code>CREATE</code> can be combined with <code>RETURN</code> to fetch the newly created data.</p><p>There are some examples about how to use <code>CREATE</code> command.</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token comment">// Create a Node</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Create Mutiple Nodes</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">City</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Paris&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">City</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Create Relations Between Nodes</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Jane&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Create Multiple Relations</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Create Complex Graph Structures</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">WORKS_AT</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>c<span class="token operator">:</span><span class="token class-name">Company</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;TechCorp&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">WORKS_AT</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Return Created Data</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> n<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The usage of <code>CREATE</code> command is as follows:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">node</span><span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span>label<span class="token operator">-</span>name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>properties<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">RETURN</span> <span class="token operator">&lt;</span><span class="token keyword">node</span><span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// &lt;properties&gt; -&gt; {&lt;key-values&gt;} | \\epsilon</span></span>
<span class="line"><span class="token comment">// &lt;key-values&gt; -&gt; [&lt;key-value-with-commas&gt;] &lt;key-value&gt;</span></span>
<span class="line"><span class="token comment">// &lt;key-value-with-commas&gt; -&gt; &lt;key-value-with-comma&gt; [&lt;key-value-with-commas&gt;]</span></span>
<span class="line"><span class="token comment">// &lt;key-value-with-comma&gt; -&gt; &lt;key-value&gt; ,</span></span>
<span class="line"><span class="token comment">// &lt;key-value&gt; -&gt; &lt;key&gt;:&lt;value&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-match" tabindex="-1"><a class="header-anchor" href="#_4-3-match"><span>4.3 MATCH</span></a></h3><p>The <code>MATCH</code> command is used to retrieve nodes, relationships or entire graph structures from a Neo4j database.</p><p>The basic usage of <code>MATCH</code> command is as follows:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">node</span><span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span>label<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> <span class="token operator">&lt;</span><span class="token keyword">node</span><span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There are some examples about how to use <code>MATCH</code> command:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token comment">// match a node with a specific label</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match a node with specific properties</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match relationships between nodes</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>q<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match patterns with both nodes and relationships</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token operator">:</span><span class="token relationship property">WORKS_AT</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>c<span class="token operator">:</span><span class="token class-name">Company</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match multiple nodes</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">City</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match nodes with multiple labels</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>m<span class="token operator">:</span><span class="token class-name">Movie</span><span class="token operator">:</span><span class="token class-name">Drama</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> m<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match nodes with conditional properties</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> p<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match nodes using wildcards</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">,</span> r<span class="token punctuation">,</span> q<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match nodes without a relationship</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token keyword">NOT</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// match nodes using pattern variables</span></span>
<span class="line"><span class="token keyword">MATCH</span> path <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>q<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> path<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-delete-and-remove" tabindex="-1"><a class="header-anchor" href="#_4-4-delete-and-remove"><span>4.4 DELETE and REMOVE</span></a></h3><p>The <code>DELETE</code> command is used to remove nodes and relationships from the graph.</p><p>There are some examples:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token comment">// delete a node</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">DELETE</span> n<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// delete a relationship without deleting the nodes</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">DELETE</span> r<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// delete a node with its relationships</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">DELETE</span> r<span class="token punctuation">,</span> n<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>REMOVE</code> command is used to remove labels or properties from nodes or relationships.</p><p>There are some examples:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token comment">// remove a label from a node</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">REMOVE</span> n<span class="token operator">:</span>Person<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// remove multiple labels</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">REMOVE</span> n<span class="token operator">:</span><span class="token class-name">Person</span><span class="token operator">:</span>Employee<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// remove a property from a node</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">REMOVE</span> n<span class="token punctuation">.</span>age<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// remove a property from a relationship</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">REMOVE</span> r<span class="token punctuation">.</span>since<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>A node <strong>cannot be deleted</strong> if it has relationships unless those relationships are removed first.</p><p>The node or relationship <strong>remains</strong> after the label or property is removed.</p></blockquote><p>==DO NOT USE DELETE OR REMOVE WITHOUT MATCH==</p><h3 id="_4-5-set" tabindex="-1"><a class="header-anchor" href="#_4-5-set"><span>4.5 SET</span></a></h3><p>The <code>SET</code> command is used to add or update properties or labels on nodes or relationships.</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token comment">// update properties</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> n<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> n<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> r<span class="token punctuation">.</span>since <span class="token operator">=</span> <span class="token number">2015</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// add labels</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> n<span class="token operator">:</span>Employee<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> n<span class="token operator">:</span><span class="token class-name">Employee</span><span class="token operator">:</span>Manager<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// remove properties</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> n<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> n<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-order-by" tabindex="-1"><a class="header-anchor" href="#_4-6-order-by"><span>4.6 ORDER BY</span></a></h3><p>The <code>ORDER BY</code> clause is used to sort the results of a query based on one or more properties of nodes or relationships.</p><p>Syntax is as follows:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">RETURN</span> n <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> n<span class="token punctuation">.</span><span class="token operator">&lt;</span>property<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>ASC</code> (ascending) is the default sorting order.</li><li><code>DESC</code> is used for descending order.</li></ul><h3 id="_4-7-union" tabindex="-1"><a class="header-anchor" href="#_4-7-union"><span>4.7 UNION</span></a></h3><p>The <code>UNION</code> clause is used to combine the results of two or more <code>MATCH</code> or <code>RETURN</code> queries. The key points to keep in mind when using <code>UNION</code> are:</p><ul><li>The result sets from the queries being combined must have the same number of columns.</li><li>The columns must have compatible data types.</li><li>By default, <code>UNION</code> removes duplicate rows. If you want to include duplicates, use <code>UNION ALL</code>.</li></ul><p>Syntax is as follows:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token operator">&lt;</span>query1<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&lt;</span>query2<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-limit-and-skip" tabindex="-1"><a class="header-anchor" href="#_4-8-limit-and-skip"><span>4.8 LIMIT and SKIP</span></a></h3><p><code>LIMIT</code> and <code>SKIP</code> are used to control the number of results returned and to paginate through results.</p><ul><li><strong><code>LIMIT</code></strong> specifies the maximum number of rows to return.</li><li><strong><code>SKIP</code></strong> specifies the number of rows to skip before starting to return results.</li></ul><p>These clauses are typically used together for pagination.</p><p>Syntax is as follows:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">RETURN</span> n <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> n<span class="token punctuation">.</span><span class="token operator">&lt;</span>property<span class="token operator">&gt;</span> <span class="token keyword">SKIP</span> <span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token keyword">LIMIT</span> <span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-9-merge" tabindex="-1"><a class="header-anchor" href="#_4-9-merge"><span>4.9 MERGE</span></a></h3><p>The <code>MERGE</code> clause is used to ensure that a specific pattern (nodes, relationships, or both) exists in the graph. If the pattern does not exist, Cypher will create it. If the pattern already exists, it will return it without creating duplicates.</p><p><code>MERGE</code> is the combination of <code>CREATE</code> and <code>MATCH</code>.</p><p>There are some examples:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token comment">// merge a node</span></span>
<span class="line"><span class="token keyword">MERGE</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">MERGE</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// merge a relationship</span></span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p1<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p2<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">MERGE</span> <span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FRIEND</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// use \`ON CREATE\` and \`ON MATCH\`</span></span>
<span class="line"><span class="token keyword">MERGE</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ON</span> <span class="token keyword">CREATE</span> <span class="token keyword">SET</span> p<span class="token punctuation">.</span>createdAt <span class="token operator">=</span> <span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ON</span> <span class="token keyword">MATCH</span> <span class="token keyword">SET</span> p<span class="token punctuation">.</span>lastSeen <span class="token operator">=</span> <span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-10-in" tabindex="-1"><a class="header-anchor" href="#_4-10-in"><span>4.10 IN</span></a></h3><p>The <code>IN</code> operator is used to check if a specific value exists within a list or collection.</p><p>Syntax is as follows:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Label</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">WHERE</span> n<span class="token punctuation">.</span>property <span class="token keyword">IN</span> <span class="token punctuation">[</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">RETURN</span> n<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, we can use <code>IN</code> with a subquery:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">WITH</span> <span class="token function">COLLECT</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">AS</span> names</span>
<span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>o<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>customerName <span class="token keyword">IN</span> names</span>
<span class="line"><span class="token keyword">RETURN</span> o<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-11-null" tabindex="-1"><a class="header-anchor" href="#_4-11-null"><span>4.11 NULL</span></a></h3><p><code>NULL</code> represents the absence of a value or the concept of &quot;nothing.&quot;</p><p>Here are some key points regarding <code>NULL</code> in Neo4j:</p><ul><li><code>NULL</code> signifies that a property does not hold any value. For instance, if a node has a property <code>age</code> and this property is not set, it will be considered <code>NULL</code>.</li><li><code>NULL</code> is not considered a value of any data type (e.g., integer, string). Instead, it is a distinct state that indicates the lack of a value.</li><li>We can check for <code>NULL</code> using the <code>IS NULL</code> or <code>IS NOT NULL</code> conditions in Cypher queries.</li><li>If we try to access a property that does not exist on a node, it will return <code>NULL</code>.</li><li>Many aggregation functions in Cypher, such as <code>COUNT</code>, ignore <code>NULL</code> values.</li></ul><h2 id="_5-id-property" tabindex="-1"><a class="header-anchor" href="#_5-id-property"><span>5. <code>id</code> Property</span></a></h2><p>The <code>id</code> property refers to a unique identifier for nodes and relationships within the database. This identifier is automatically assigned by Neo4j and serves as a way to uniquely identify each element in the graph.</p><p>Here are some key points regarding the <code>id</code> property:</p><ul><li>When creating a new node or relationship, Neo4j automatically assigns a unique <code>id</code> to it. This <code>id</code> is not user-defined and cannot be changed.</li><li>Each node and relationship in Neo4j has a unique <code>id</code> within its respective graph. This means that no two nodes or relationships will have the same <code>id</code>.</li><li>The <code>id</code> is an integer value, starting from <code>0</code> for the first node or relationship created and increasing sequentially as new nodes or relationships are added.</li><li>We can access the <code>id</code> of a node or relationship in Cypher queries using the <code>id()</code> function.</li><li>The <code>id</code> property is specific to the Neo4j database instance. If we export and import data, the <code>id</code> values may change.</li><li>The <code>id</code> property is not meant to be used as a business key or reference in application logic. Instead, it is primarily for internal identification purposes. For application-level unique identification, consider defining our own unique properties.</li></ul><h2 id="_6-direction" tabindex="-1"><a class="header-anchor" href="#_6-direction"><span>6. Direction</span></a></h2><p>Direction specifies the way in which relationships are connected between nodes, indicating a one-way connection from one node to another.</p><ul><li><p>In Neo4j, all relationships are directed. This means that each relationship has a specific start node and end node, indicating a one-way connection.</p></li><li><p>Each relationship can have a type, which describes the nature of the connection. The direction is indicated by the arrow in the notation.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">(Alice)-[:FRIENDS_WITH]-&gt;(Bob)</span>
<span class="line">(Bob)&lt;-[:WORKS_WITH]-(Charlie)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>While relationships are inherently directed, we can create a structure that allows for bidirectional navigation. This can be achieved by creating two relationships, one in each direction:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">(A)-[:FRIENDS_WITH]-&gt;(B)</span>
<span class="line">(B)-[:FRIENDS_WITH]-&gt;(A)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>If you want to find relationships without regard to direction, you can use the relationship pattern without arrows. For example:</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FRIENDS_WITH</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">RETURN</span> b<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>Relationships are always directed and can be queried based on their direction. The direction concept is essential for accurately modeling and querying graph data.</p><h2 id="_7-cql-function" tabindex="-1"><a class="header-anchor" href="#_7-cql-function"><span>7. CQL Function</span></a></h2><h3 id="_7-1-string-function" tabindex="-1"><a class="header-anchor" href="#_7-1-string-function"><span>7.1 String Function</span></a></h3><table><thead><tr><th style="text-align:center;">Function</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>UPPER</code></td><td style="text-align:center;"><code>UPPER(&lt;input-string&gt;)</code></td></tr><tr><td style="text-align:center;"><code>LOWER</code></td><td style="text-align:center;"><code>LOWER(&lt;input-string&gt;)</code></td></tr><tr><td style="text-align:center;"><code>SUBSTRING</code></td><td style="text-align:center;"><code>SUBSTRING(&lt;input-string&gt;,&lt;start-index&gt;,&lt;end-index&gt;)</code></td></tr><tr><td style="text-align:center;"><code>REPLACE</code></td><td style="text-align:center;"></td></tr></tbody></table><h3 id="_7-2-aggregation-function" tabindex="-1"><a class="header-anchor" href="#_7-2-aggregation-function"><span>7.2 Aggregation Function</span></a></h3><ul><li><code>COUNT</code></li><li><code>MAX</code></li><li><code>MIN</code></li><li><code>SUM</code></li><li><code>AVG</code></li></ul><h3 id="_7-3-relationship-function" tabindex="-1"><a class="header-anchor" href="#_7-3-relationship-function"><span>7.3 Relationship Function</span></a></h3><table><thead><tr><th style="text-align:center;">Function</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>STARTNODE</code></td><td style="text-align:center;">find the start node of a relationship</td></tr><tr><td style="text-align:center;"><code>ENDNODE</code></td><td style="text-align:center;">find the end node of a relationship</td></tr><tr><td style="text-align:center;"><code>ID</code></td><td style="text-align:center;">find the id of a relationship</td></tr><tr><td style="text-align:center;"><code>TYPE</code></td><td style="text-align:center;">find the type of a relationship represented by string</td></tr></tbody></table><h2 id="_8-index" tabindex="-1"><a class="header-anchor" href="#_8-index"><span>8. INDEX</span></a></h2><p>Index in CQL is similar as that in SQL.</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> <span class="token keyword">ON</span> <span class="token operator">:</span><span class="token operator">&lt;</span>label<span class="token operator">-</span>name<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>property<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token keyword">ON</span> <span class="token operator">:</span><span class="token operator">&lt;</span>label<span class="token operator">-</span>name<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>property<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-unique" tabindex="-1"><a class="header-anchor" href="#_9-unique"><span>9. UNIQUE</span></a></h2><p><code>UNIQUE</code> can be added into nodes or relationships.</p><div class="language-cypher line-numbers-mode" data-highlighter="prismjs" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">CONSTRAINT</span> <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>label<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">ASSERT</span> <span class="token operator">&lt;</span>property<span class="token operator">-</span>name<span class="token operator">&gt;</span> <span class="token keyword">IS</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">DROP</span> <span class="token keyword">CONSTRAINT</span> <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>label<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">ASSERT</span> <span class="token operator">&lt;</span>property<span class="token operator">-</span>name<span class="token operator">&gt;</span> <span class="token keyword">IS</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-other-things" tabindex="-1"><a class="header-anchor" href="#_10-other-things"><span>10. Other Things</span></a></h2>`,118)),s("p",null,[n[8]||(n[8]=a("We will use ")),s("a",k,[n[6]||(n[6]=a("Gremlin")),t(e)]),n[9]||(n[9]=a(" and ")),s("a",h,[n[7]||(n[7]=a("G.V")),t(e)]),n[10]||(n[10]=a(" to access Neo4j in ArkAnalyzer project."))]),n[17]||(n[17]=s("p",null,"Also, in the future, we can use Neo4j with Spring framework in other projects.",-1))])}const y=p(r,[["render",m],["__file","Neo4j.html.vue"]]),b=JSON.parse('{"path":"/blogs/ArkAnalyzer/Neo4j.html","title":"Neo4j","lang":"en-US","frontmatter":{"categories":["ArkAnalyzer"]},"headers":[{"level":2,"title":"1. Download and Run Neo4j Server","slug":"_1-download-and-run-neo4j-server","link":"#_1-download-and-run-neo4j-server","children":[]},{"level":2,"title":"2. Connect to Neo4j Server","slug":"_2-connect-to-neo4j-server","link":"#_2-connect-to-neo4j-server","children":[{"level":3,"title":"2.1 Set Username and Password","slug":"_2-1-set-username-and-password","link":"#_2-1-set-username-and-password","children":[]},{"level":3,"title":"2.2 Connect to Neo4j Server in TS","slug":"_2-2-connect-to-neo4j-server-in-ts","link":"#_2-2-connect-to-neo4j-server-in-ts","children":[]}]},{"level":2,"title":"3. Neo4j Modules","slug":"_3-neo4j-modules","link":"#_3-neo4j-modules","children":[{"level":3,"title":"3.1 Node","slug":"_3-1-node","link":"#_3-1-node","children":[]},{"level":3,"title":"3.2 Attribute","slug":"_3-2-attribute","link":"#_3-2-attribute","children":[]},{"level":3,"title":"3.3 Relationship","slug":"_3-3-relationship","link":"#_3-3-relationship","children":[]},{"level":3,"title":"3.4 Label","slug":"_3-4-label","link":"#_3-4-label","children":[]},{"level":3,"title":"3.5 Data Browser","slug":"_3-5-data-browser","link":"#_3-5-data-browser","children":[]}]},{"level":2,"title":"4. Neo4j CQL (Cypher Query Language)","slug":"_4-neo4j-cql-cypher-query-language","link":"#_4-neo4j-cql-cypher-query-language","children":[{"level":3,"title":"4.1 Neo4j Data Type","slug":"_4-1-neo4j-data-type","link":"#_4-1-neo4j-data-type","children":[]},{"level":3,"title":"4.2 CREATE","slug":"_4-2-create","link":"#_4-2-create","children":[]},{"level":3,"title":"4.3 MATCH","slug":"_4-3-match","link":"#_4-3-match","children":[]},{"level":3,"title":"4.4 DELETE and REMOVE","slug":"_4-4-delete-and-remove","link":"#_4-4-delete-and-remove","children":[]},{"level":3,"title":"4.5 SET","slug":"_4-5-set","link":"#_4-5-set","children":[]},{"level":3,"title":"4.6 ORDER BY","slug":"_4-6-order-by","link":"#_4-6-order-by","children":[]},{"level":3,"title":"4.7 UNION","slug":"_4-7-union","link":"#_4-7-union","children":[]},{"level":3,"title":"4.8 LIMIT and SKIP","slug":"_4-8-limit-and-skip","link":"#_4-8-limit-and-skip","children":[]},{"level":3,"title":"4.9 MERGE","slug":"_4-9-merge","link":"#_4-9-merge","children":[]},{"level":3,"title":"4.10 IN","slug":"_4-10-in","link":"#_4-10-in","children":[]},{"level":3,"title":"4.11 NULL","slug":"_4-11-null","link":"#_4-11-null","children":[]}]},{"level":2,"title":"5. id Property","slug":"_5-id-property","link":"#_5-id-property","children":[]},{"level":2,"title":"6. Direction","slug":"_6-direction","link":"#_6-direction","children":[]},{"level":2,"title":"7. CQL Function","slug":"_7-cql-function","link":"#_7-cql-function","children":[{"level":3,"title":"7.1 String Function","slug":"_7-1-string-function","link":"#_7-1-string-function","children":[]},{"level":3,"title":"7.2 Aggregation Function","slug":"_7-2-aggregation-function","link":"#_7-2-aggregation-function","children":[]},{"level":3,"title":"7.3 Relationship Function","slug":"_7-3-relationship-function","link":"#_7-3-relationship-function","children":[]}]},{"level":2,"title":"8. INDEX","slug":"_8-index","link":"#_8-index","children":[]},{"level":2,"title":"9. UNIQUE","slug":"_9-unique","link":"#_9-unique","children":[]},{"level":2,"title":"10. Other Things","slug":"_10-other-things","link":"#_10-other-things","children":[]}],"git":{"createdTime":1727442951000,"updatedTime":1727535796000,"contributors":[{"name":"gitDebuger","email":"hygchn04@gmail.com","commits":2}]},"filePathRelative":"blogs/ArkAnalyzer/Neo4j.md"}');export{y as comp,b as data};
