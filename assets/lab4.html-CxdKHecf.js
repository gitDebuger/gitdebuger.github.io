import{_ as s,c as a,e as p,o as e}from"./app-CNYnZXky.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="lab4实验报告" tabindex="-1"><a class="header-anchor" href="#lab4实验报告"><span>Lab4实验报告</span></a></h1><h2 id="_1-思考题" tabindex="-1"><a class="header-anchor" href="#_1-思考题"><span>1. 思考题</span></a></h2><h3 id="_1-1-thinking-4-1" tabindex="-1"><a class="header-anchor" href="#_1-1-thinking-4-1"><span>1.1 Thinking 4.1</span></a></h3><p><strong>思考并回答下面的问题：</strong></p><ul><li><p><strong>内核在保存现场的时候是如何避免破坏通用寄存器的？</strong></p><p>在系统调用异常处理函数 <code>andle_sys</code> 的开始，调用了 <code>SAVE_ALL</code> 宏， <code>SAVE_ALL</code> 将把所有的寄存器保存到指定位置，进而保证了在后续步骤不会破坏通用寄存器。在系统调用结束， <code>handle_sys</code> 调用 <code>j ret_from_exception</code> ，在这里，调用了 <code>RESTORE_SOME</code> 将所有通用寄存器的值恢复。</p></li><li><p><strong>系统陷入内核调用后可以直接从当时的 <code>$a0-$a3</code> 参数寄存器中得到用户调用 <code>msyscall</code> 留下的信息吗？</strong></p><p>可以，因为 <code>msyscall</code> 函数调用时，寄存器 <code>$a0-$a3</code> 用于存放前四个参数。执行 <code>syscall</code> 并没有改变这四个寄存器。</p></li><li><p><strong>我们是怎么做到让 <code>sys</code> 开头的函数“认为”我们提供了和用户调用 <code>msyscall</code> 时同样的参数的？</strong></p><p>在 <code>handle_sys</code> 中先取出 <code>$a0</code> 到 <code>$a3</code> ，再从用户栈中取出其他的参数，最后将这些参数保存到内核栈中，模拟使得内核态的 <code>sys</code> 函数可以正常将这些参数传入到函数中。在跳转到 <code>sys</code> 开头的函数之前， <code>handle_sys</code> 将需要传递的参数都存到了栈中。在 <code>sys</code> 开头的函数中，会从栈中找传递的参数，就“认为”我们提供了和用户调用 <code>msyscall</code> 时同样的参数。</p></li><li><p><strong>内核处理系统调用的过程对 <code>Trapframe</code> 做了哪些更改？这种修改对应的用户态的变化是？</strong></p><p><code>handle_sys</code> 函数在把上下文环境保存到 <code>Trapframe</code> 中后，取出 <code>EPC</code> 并将 <code>EPC</code> 加 <code>4</code> ，在返回用户态后，从 <code>syscall</code> 的后一条指令开始执行。将返回值存入 <code>$v0</code> 寄存器，用户态可以正常获得系统调用的返回值。</p></li></ul><h3 id="_1-2-thinking-4-2" tabindex="-1"><a class="header-anchor" href="#_1-2-thinking-4-2"><span>1.2 Thinking 4.2</span></a></h3><p><strong>思考 <code>envid2env</code> 函数：为什么 <code>envid2env</code> 需要判断 <code>e-&gt;env_id != envid</code> 的情况？如果没有这步判断会发生什么情况？</strong></p><p>这实际上考虑了这样一种情况，某一进程完成运行，资源被回收，这时其对应的进程控制块会插入回 <code>env_free_list</code> 中。当我们需要再次创建内存时，就可能重新取得该进程控制块，并为其赋予不同的 <code>envid</code> 。这时，已销毁进程的 <code>envid</code> 和新创建进程的 <code>envid</code> 都能通过 <code>ENVX</code> 宏取得相同的值，对应了同一个进程控制块。可是已销毁进程的 <code>envid</code> 却不应当再次出现，表达式 <code>e-&gt;env_id != envid</code> 就处理了 <code>envid</code> 属于已销毁进程的情况。</p><h3 id="_1-3-thinking-4-3" tabindex="-1"><a class="header-anchor" href="#_1-3-thinking-4-3"><span>1.3 Thinking 4.3</span></a></h3><p><strong>思考下面的问题，并对这个问题谈谈你的理解：请回顾 <code>lib/env.c</code> 文件中 <code>mkenvid()</code> 函数的实现，该函数不会返回 <code>0</code> ，请结合系统调用和 <code>IPC</code> 部分的实现与 <code>envid2env()</code> 函数的行为进行解释。</strong></p><p>首先，函数 <code>mkenvid</code> 的实现如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line">u_int <span class="token function">mkenvid</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">static</span> u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> LOG2NENV<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>e <span class="token operator">-</span> envs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数内部定义了自增的静态变量 <code>i</code> 用于确保生成的 <code>envid</code> 的唯一性，每次左移 <code>11</code> 位再或上 <code>e-envs</code> 也就是当前进程控制块在进程控制块数组中的偏移量。该函数第一次执行时返回的值为 <code>1&lt;&lt;11|(e-envs)</code> ，因此该函数不会返回 <code>0</code> 。</p><p>函数 <code>envid2env</code> 的实现如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">int</span> <span class="token function">envid2env</span><span class="token punctuation">(</span>u_int envid<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span><span class="token operator">*</span>penv<span class="token punctuation">,</span> <span class="token keyword">int</span> checkperm<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span>e<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">/* Exercise 4.3: Your code here. (1/2) */</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>envid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token operator">*</span>penv <span class="token operator">=</span> curenv<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		e <span class="token operator">=</span> envs <span class="token operator">+</span> <span class="token function">ENVX</span><span class="token punctuation">(</span>envid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>env_status <span class="token operator">==</span> ENV_FREE <span class="token operator">||</span> e<span class="token operator">-&gt;</span>env_id <span class="token operator">!=</span> envid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span>E_BAD_ENV<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">/* Exercise 4.3: Your code here. (2/2) */</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>checkperm <span class="token operator">&amp;&amp;</span> e<span class="token operator">-&gt;</span>env_id <span class="token operator">!=</span> curenv<span class="token operator">-&gt;</span>env_id <span class="token operator">&amp;&amp;</span> e<span class="token operator">-&gt;</span>env_parent_id <span class="token operator">!=</span> curenv<span class="token operator">-&gt;</span>env_id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span>E_BAD_ENV<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token operator">*</span>penv <span class="token operator">=</span> e<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，如果传入的 <code>envid</code> 是 <code>0</code> ，那么直接返回 <code>curenv</code> 。因此上述 <code>envid</code> 为 <code>0</code> 的进程无法通过进程号被找到。</p><p>在 <code>IPC</code> 中如果要发送消息，需要通过 <code>envid</code> 找到对应进程，而通过 <code>envid2env</code> 找到的是当前进程而不一定是想要发送到的 <code>envid</code> 为 0 的进程，从而造成消息错误发送，接受方也无法收到对应的消息。</p><p>此外，在 <code>fork</code> 函数中，父进程的返回值为子进程的 <code>envid</code> ，子进程的返回值为 <code>0</code> ，如果存在进程号为 <code>0</code> 的进程，系统很可能会把一个父进程误认为是子进程，从而执行错误的操作。</p><p>结合这两个案例，就可以解释为什么 <code>mkenvid</code> 函数不能返回 <code>0</code> ，根本原因是 <code>0</code> 有特殊的含义，不能作为进程号存在。</p><h3 id="_1-4-thinking-4-4" tabindex="-1"><a class="header-anchor" href="#_1-4-thinking-4-4"><span>1.4 Thinking 4.4</span></a></h3><p><strong>关于 <code>fork</code> 函数的两个返回值，下面说法正确的是：</strong></p><p><strong>A. <code>fork</code> 在父进程中被调用两次，产生两个返回值。</strong></p><p><strong>B. <code>fork</code> 在两个进程中分别被调用一次，产生两个不同的返回值</strong></p><p><strong>C. <code>fork</code> 只在父进程中被调用了一次，在两个进程中各产生一个返回值</strong></p><p><strong>D. <code>fork</code> 只在子进程中被调用了一次，在两个进程中各产生一个返回值</strong></p><p>正确的选项是 C 选项。经典的一次调用、两次返回，在父进程中被调用一次，在两个进程中各产生一个返回值。子进程在父进程调用 <code>fork</code> 时被创建，并赋予不同返回值，子进程返回值为 <code>0</code> ，父进程返回值为子进程的进程号。</p><h3 id="_1-5-thinking-4-5" tabindex="-1"><a class="header-anchor" href="#_1-5-thinking-4-5"><span>1.5 Thinking 4.5</span></a></h3><p><strong>我们并不应该对所有的用户空间页都使用 <code>duppage</code> 进行映射。那么究竟哪些用户空间页应该映射，哪些不应该呢？请结合 <code>kern/env.c</code> 中 <code>env_init</code> 函数进行的页面映射和 <code>include/mmu.h</code> 里的内存布局图以及本章的后续描述进行思考。</strong></p><p>从内存布局图来看，我们需要保护的用户空间页为 <code>UTEXT</code> 到 <code>USTACKTOP</code> 的这一段，因为从 <code>USTACKTOP</code> 再往上到 <code>UXSTACKTOP</code> 这一段属于异常栈和无效内存的范围。</p><ul><li>每个进程的异常处理栈属于自己的，不能映射给子进程。如果允许写时复制，则会导致：进程异常栈被写 -&gt; 触发写时复制缺⻚异常 -&gt; 需要保存现场 -&gt; 写进程异常栈 -&gt; 触发写时复制缺⻚异常 -&gt; 死循环。</li><li>无效内存的范围显然不需要被保护。</li></ul><p>与此同时，在 <code>UTEXT</code> 到 <code>USTACKTOP</code> 这一段中，也并不是所有页都要被保护。</p><ul><li>首先，只读的页不需要被保护。</li><li>其次，用 <code>PTE_LIBRARY</code> 标识的页为共享页，同样不需要被保护。</li><li>其他的页无论是否已含有 <code>PTE_COW</code> ，都要用 <code>PTE_COW</code> 标记以作为保护。</li></ul><h3 id="_1-6-thinking-4-6" tabindex="-1"><a class="header-anchor" href="#_1-6-thinking-4-6"><span>1.6 Thinking 4.6</span></a></h3><p><strong>在遍历地址空间存取页表项时你需要使用到 <code>vpd</code> 和 <code>vpt</code> 这两个指针，请参考 <code>user/include/lib.h</code> 中的相关定义，思考并回答这几个问题：</strong></p><ul><li><p><strong><code>vpt</code> 和 <code>vpd</code> 的作用是什么？怎样使用它们？</strong></p><p>这两个指针的定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">vpt</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">volatile</span> Pte <span class="token operator">*</span><span class="token punctuation">)</span>UVPT<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">vpd</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">volatile</span> Pde <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>UVPT <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">PDX</span><span class="token punctuation">(</span>UVPT<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> PGSHIFT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>UVPT</code> 定义在 <code>include/mmu.h</code> 中</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UVPT</span> <span class="token expression"><span class="token punctuation">(</span>ULIM <span class="token operator">-</span> PDMAP<span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结合内存布局图，该宏意为页表的起始地址。</p><p>根据页目录的自映射机制，这两个指针中 <code>vpt</code> 是指向二级页表的指针，而 <code>vpd</code> 是指向一级页表，也即页目录的指针。</p><p>对于虚拟地址 <code>va</code> ，使用 <code>vpd[va &gt;&gt; 22]</code> 可以得到二级页表的物理地址，使用 <code>vpt[va &gt;&gt; 12]</code> 可以得到 <code>va</code> 对应的物理页面。</p></li><li><p><strong>从实现的角度谈一下为什么进程能够通过这种方式来存取自身的页表？</strong></p><p><code>vpt</code> 与 <code>vpd</code> 本质上是通过宏定义的方式来对用户态的一段内存地址进行映射，因此使用这种方式实际上就是在使用内存布局图中的地址，所以可以通过这种方式来存取进程自身页表。</p></li><li><p><strong>它们是如何体现自映射设计的？</strong></p><p><code>vpd</code> 本身处于 <code>vpt</code> 段中，说明页目录本身处于其所映射的页表中的一个页面里面。所以这两个指针的设计中运用了自映射。</p></li><li><p><strong>进程能够通过这种方式来修改自己的页表项吗？</strong></p><p>不能。进程本身处于用户态，不可以修改自身页表项，这两个指针仅供页表和页目录访问所用。这部分地址只读，用户不能修改。</p></li></ul><h3 id="_1-7-thinking-4-7" tabindex="-1"><a class="header-anchor" href="#_1-7-thinking-4-7"><span>1.7 Thinking 4.7</span></a></h3><p><strong>在 <code>do_tlb_mod</code> 函数中，你可能注意到了一个向异常处理栈复制 <code>Trapframe</code> 运行现场的过程，请思考并回答这几个问题：</strong></p><ul><li><p><strong>这里实现了一个支持类似于“异常重入”的机制，而在什么时候会出现这种“异常重入”？</strong></p><p>在用户发生写时复制引发的缺页中断并进行处理时，可能会再次发生缺页中断，从而出现“中断重入”。</p></li><li><p><strong>内核为什么需要将异常的现场 <code>Trapframe</code> 复制到用户空间？</strong></p><p>在微内核结构中，对缺页错误的处理由用户进程完成，用户进程在处理过程中需要读取 <code>Trapframe</code> 的内容；同时，在处理结束后同样是由用户进程恢复现场，会用到 <code>Trapframe</code> 中的数据。</p></li></ul><h3 id="_1-8-thinking-4-8" tabindex="-1"><a class="header-anchor" href="#_1-8-thinking-4-8"><span>1.8 Thinking 4.8</span></a></h3><p><strong>在用户态处理页写入异常，相比于在内核态处理有什么优势？</strong></p><p>陷入内核会增添操作系统内核的工作量；且让用户进程实现内核功能体现了微内核思想，全方位保证操作系统正常运行。将异常处理交给用户进程，可以让内核做更多其他的事情。</p><h3 id="_1-9-thinking-4-9" tabindex="-1"><a class="header-anchor" href="#_1-9-thinking-4-9"><span>1.9 Thinking 4.9</span></a></h3><p><strong>请思考并回答以下几个问题：</strong></p><ul><li><p><strong>为什么需要将 <code>syscall_set_tlb_mod_entry</code> 的调用放置在 <code>syscall_exofork</code> 之前？</strong></p><p>在调用 <code>syscall_env_alloc</code> 的过程中也可能需要进行异常处理，在调用 <code>fork</code> 时，有可能当前进程已是之前进程的子进程，从而需要考虑是否会发生写时复制的缺页中断异常处理，如果这时还没有调用过 <code>syscall_set_tlb_mod_entry</code> 则无法处理异常。</p></li><li><p><strong>如果放置在写时复制保护机制完成之后会有怎样的效果？</strong></p><p>在 <code>fork</code> 函数中，会先后调用 <code>syscall_set_tlb_mod_entry</code> 函数和 <code>duppage</code> 函数，在 <code>duppage</code> 函数中进行写时复制保护机制的设置。而在这两个函数之间会调用 <code>syscall_exofork</code> 创建子进程，创建的过程中会将父进程的陷入帧复制给子进程，这其中就应该包含 <code>syscall_set_tlb_mod_entry</code> 函数设置的进程控制块中的 <code>env_user_tlb_mod_entry</code> 字段。如果在写时复制保护机制设置完成之后才调用 <code>syscall_set_tlb_mod_entry</code> 函数，那么前面的字段将不会设置给子进程，或者说需要在父进程和子进程各执行一遍 <code>syscall_set_tlb_mod_entry</code> 调用才能完成设置。</p></li></ul><h2 id="_2-难点分析" tabindex="-1"><a class="header-anchor" href="#_2-难点分析"><span>2. 难点分析</span></a></h2><p>这部分实验主要分为三部分：系统调用、进程通信和 <code>fork</code> 机制。</p><p>课下实验大家一定都是“借鉴”往年学长的作品，这里就不再赘述了，这里主要想分析一下限时上机的代码。</p><h3 id="_2-1-1-exam" tabindex="-1"><a class="header-anchor" href="#_2-1-1-exam"><span>2.1 1-exam</span></a></h3><p>这部分主要是实现一个信号量机制，包括信号量的打开、关闭和PV操作。其中有意思的一点是，信号量可以被重复打开，但是后续的打开操作不再重新初始化信号量。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">void</span> <span class="token function">sys_sem_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> sem_id<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Lab 4-1-Exam: Your code here. (6/9)</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>sem_id <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sem_id <span class="token operator">&lt;</span> <span class="token number">15</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sems_valid<span class="token punctuation">[</span>sem_id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		sems_valid<span class="token punctuation">[</span>sem_id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">		sems<span class="token punctuation">[</span>sem_id<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-1-extra" tabindex="-1"><a class="header-anchor" href="#_2-2-1-extra"><span>2.2 1-extra</span></a></h3><p>这部分是实现一个消息队列，主要实现思路就是将 <code>sys_ipc_try_send</code> 的操作拆分成两个函数，分别是 <code>sys_msg_send</code> 和 <code>sys_msg_recv</code> 函数。将相应的操作存放在消息控制块中，相当于一种延时执行。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_msg_send</span><span class="token punctuation">(</span>u_int envid<span class="token punctuation">,</span> u_int value<span class="token punctuation">,</span> u_int srcva<span class="token punctuation">,</span> u_int perm<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span>e<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Msg</span> <span class="token operator">*</span>m<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>srcva <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_illegal_va</span><span class="token punctuation">(</span>srcva<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span>E_INVAL<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">envid2env</span><span class="token punctuation">(</span>envid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TAILQ_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg_free_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span>E_NO_MSG<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">/* Your Code Here (1/3) */</span></span>
<span class="line">	m <span class="token operator">=</span> <span class="token function">TAILQ_FIRST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg_free_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	m<span class="token operator">-&gt;</span>msg_tier<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">	m<span class="token operator">-&gt;</span>msg_status <span class="token operator">=</span> MSG_SENT<span class="token punctuation">;</span></span>
<span class="line">	<span class="token function">TAILQ_REMOVE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg_free_list<span class="token punctuation">,</span> m<span class="token punctuation">,</span> msg_link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	m<span class="token operator">-&gt;</span>msg_from <span class="token operator">=</span> curenv<span class="token operator">-&gt;</span>env_id<span class="token punctuation">;</span></span>
<span class="line">	m<span class="token operator">-&gt;</span>msg_value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">	m<span class="token operator">-&gt;</span>msg_perm <span class="token operator">=</span> PTE_V <span class="token operator">|</span> perm<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>srcva <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		p <span class="token operator">=</span> <span class="token function">page_lookup</span><span class="token punctuation">(</span>curenv<span class="token operator">-&gt;</span>env_pgdir<span class="token punctuation">,</span> srcva<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token operator">-</span>E_INVAL<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		p<span class="token operator">-&gt;</span>pp_ref<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">		m<span class="token operator">-&gt;</span>msg_page <span class="token operator">=</span> p<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		m<span class="token operator">-&gt;</span>msg_page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">TAILQ_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>env_msg_list<span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> msg_link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token function">msg2id</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_msg_recv</span><span class="token punctuation">(</span>u_int dstva<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Msg</span> <span class="token operator">*</span>m<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>dstva <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_illegal_va</span><span class="token punctuation">(</span>dstva<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span>E_INVAL<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TAILQ_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>curenv<span class="token operator">-&gt;</span>env_msg_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span>E_NO_MSG<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">/* Your Code Here (2/3) */</span></span>
<span class="line">	m <span class="token operator">=</span> <span class="token function">TAILQ_FIRST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>curenv<span class="token operator">-&gt;</span>env_msg_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token function">TAILQ_REMOVE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>curenv<span class="token operator">-&gt;</span>env_msg_list<span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> msg_link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>msg_page <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> dstva <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		p <span class="token operator">=</span> m<span class="token operator">-&gt;</span>msg_page<span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">page_insert</span><span class="token punctuation">(</span>curenv<span class="token operator">-&gt;</span>env_pgdir<span class="token punctuation">,</span> curenv<span class="token operator">-&gt;</span>env_asid<span class="token punctuation">,</span> p<span class="token punctuation">,</span> dstva<span class="token punctuation">,</span> m<span class="token operator">-&gt;</span>msg_perm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">page_decref</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>msg_page <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">page_decref</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>msg_page<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	curenv<span class="token operator">-&gt;</span>env_msg_value <span class="token operator">=</span> m<span class="token operator">-&gt;</span>msg_value<span class="token punctuation">;</span></span>
<span class="line">	curenv<span class="token operator">-&gt;</span>env_msg_from <span class="token operator">=</span> m<span class="token operator">-&gt;</span>msg_from<span class="token punctuation">;</span></span>
<span class="line">	curenv<span class="token operator">-&gt;</span>env_msg_perm <span class="token operator">=</span> m<span class="token operator">-&gt;</span>msg_perm<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	m<span class="token operator">-&gt;</span>msg_status <span class="token operator">=</span> MSG_RECV<span class="token punctuation">;</span></span>
<span class="line">	<span class="token function">TAILQ_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg_free_list<span class="token punctuation">,</span> m<span class="token punctuation">,</span> msg_link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-2-exam" tabindex="-1"><a class="header-anchor" href="#_2-3-2-exam"><span>2.3 2-exam</span></a></h3><p>这部分要实现这样一个功能，在子进程执行系统调用之前，将系统调用号信息发送给父进程，然后父进程接收系统调用号信息并执行相应操作。总体来说，难度不算高，但是需要注意在 <code>strace_send</code> 函数中执行系统调用之前，将 <code>straced</code> 设置为 <code>0</code> 避免循环调用。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">void</span> <span class="token function">strace_send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sysno<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SYS_putchar <span class="token operator">&lt;=</span> sysno <span class="token operator">&amp;&amp;</span> sysno <span class="token operator">&lt;=</span> SYS_set_tlb_mod_entry<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">	      <span class="token punctuation">(</span>SYS_exofork <span class="token operator">&lt;=</span> sysno <span class="token operator">&amp;&amp;</span> sysno <span class="token operator">&lt;=</span> SYS_panic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">	    sysno <span class="token operator">==</span> SYS_set_trapframe<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// Your code here. (1/2)</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>straced <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		straced <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span>child <span class="token operator">=</span> envs <span class="token operator">+</span> <span class="token function">ENVX</span><span class="token punctuation">(</span><span class="token function">syscall_getenvid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		u_int parent <span class="token operator">=</span> child<span class="token operator">-&gt;</span>env_parent_id<span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">ipc_send</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> sysno<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">syscall_set_env_status</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ENV_NOT_RUNNABLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		straced <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">strace_recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Your code here. (2/2)</span></span>
<span class="line">	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">	u_int child<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">int</span> sysno<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sysno <span class="token operator">=</span> <span class="token function">ipc_recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>child<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SYS_env_destroy<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token function">strace_barrier</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">recv_sysno</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> sysno<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">syscall_set_env_status</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> ENV_RUNNABLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-2-extra" tabindex="-1"><a class="header-anchor" href="#_2-4-2-extra"><span>2.4 2-extra</span></a></h3><p>这部分需要实现轻量级进程的创建，功能上和 <code>fork</code> 函数类似，但是父进程和子进程完全共享内存，自然也就不再需要写时复制机制。</p><p>这道题的难度较高，首先需要在 <code>kern/syscall_all.c</code> 中实现内核态系统调用函数 <code>sys_clone</code> 并写入系统调用向量表：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_clone</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>func<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>child_stack<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">pa2page</span><span class="token punctuation">(</span><span class="token function">PADDR</span><span class="token punctuation">(</span>curenv<span class="token operator">-&gt;</span>env_pgdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pp_ref <span class="token operator">&gt;=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span>E_ACT_ENV_NUM_EXCEED<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span>e<span class="token punctuation">;</span></span>
<span class="line">	<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">env_clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">,</span> curenv<span class="token operator">-&gt;</span>env_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_tf <span class="token operator">=</span> curenv<span class="token operator">-&gt;</span>env_tf<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>env_tf<span class="token punctuation">)</span><span class="token punctuation">.</span>regs<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> child_stack<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>env_tf<span class="token punctuation">)</span><span class="token punctuation">.</span>cp0_epc <span class="token operator">=</span> func<span class="token punctuation">;</span></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_status <span class="token operator">=</span> ENV_RUNNABLE<span class="token punctuation">;</span></span>
<span class="line">	<span class="token function">TAILQ_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>env_sched_list<span class="token punctuation">,</span> e<span class="token punctuation">,</span> env_sched_link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> e<span class="token operator">-&gt;</span>env_id<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>kern/env.c</code> 中添加 <code>env_clone</code> 函数，这个函数类似 <code>env_alloc</code> 函数，只是不再调用 <code>env_setup_vm</code> 和 <code>asid_alloc</code> 分配相应字段，而是继承父进程的相应字段。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">int</span> <span class="token function">env_clone</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span><span class="token operator">*</span>new<span class="token punctuation">,</span> u_int parent_id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">int</span> r<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span>e<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LIST_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>env_free_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span>E_NO_FREE_ENV<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	e <span class="token operator">=</span> <span class="token function">LIST_FIRST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>env_free_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_user_tlb_mod_entry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_runs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_id <span class="token operator">=</span> <span class="token function">mkenvid</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_parent_id <span class="token operator">=</span> parent_id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Env</span> <span class="token operator">*</span>parent <span class="token operator">=</span> envs <span class="token operator">+</span> <span class="token function">ENVX</span><span class="token punctuation">(</span>parent_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_pgdir <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>env_pgdir<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">pa2page</span><span class="token punctuation">(</span><span class="token function">PADDR</span><span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>env_pgdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	p<span class="token operator">-&gt;</span>pp_ref<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_asid <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>env_asid<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_tf<span class="token punctuation">.</span>cp0_status <span class="token operator">=</span> STATUS_IM7 <span class="token operator">|</span> STATUS_IE <span class="token operator">|</span> STATUS_EXL <span class="token operator">|</span> STATUS_UM<span class="token punctuation">;</span></span>
<span class="line">	e<span class="token operator">-&gt;</span>env_tf<span class="token punctuation">.</span>regs<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> USTACKTOP <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token function">LIST_REMOVE</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> env_link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token operator">*</span>new <span class="token operator">=</span> e<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还需要修改 <code>env_free</code> 的实现，确保只有当该页目录的引用次数为 <code>1</code> 时才释放。</p><p>其他需要编写的代码就和普通的系统调用函数相同了，包括用户态的系统调用接口等。</p><p>还有一点需要说明，页目录本身也会占据一张页面，所以我们使用该页面控制块 <code>struct Page</code> 的 <code>pp_ref</code> 字段标记页目录的引用次数。</p><h2 id="_3-实验体会" tabindex="-1"><a class="header-anchor" href="#_3-实验体会"><span>3. 实验体会</span></a></h2><p>系统调用是操作系统对用户程序提供服务的重要方式，可以用于保护操作系统的核心功能；同时简化用户程序的实现，编写用户程序时不再需要关心底层实现。</p><p>进程通信是多进程环境的重要功能，通过进程通信可以实现进程的同步与互斥，而不是各进程毫无关联，退化为批处理系统。</p><p><img src="https://github.com/gitDebuger/2024-os-lab/blob/documents/pic/彩蛋.png?raw=true" alt="彩蛋"></p><p>另外，这个彩蛋真是太有意思啦！</p>`,70)]))}const i=s(t,[["render",o],["__file","lab4.html.vue"]]),u=JSON.parse('{"path":"/blogs/OS/lab4.html","title":"Lab4实验报告","lang":"en-US","frontmatter":{"categories":["OS"]},"headers":[{"level":2,"title":"1. 思考题","slug":"_1-思考题","link":"#_1-思考题","children":[{"level":3,"title":"1.1 Thinking 4.1","slug":"_1-1-thinking-4-1","link":"#_1-1-thinking-4-1","children":[]},{"level":3,"title":"1.2 Thinking 4.2","slug":"_1-2-thinking-4-2","link":"#_1-2-thinking-4-2","children":[]},{"level":3,"title":"1.3 Thinking 4.3","slug":"_1-3-thinking-4-3","link":"#_1-3-thinking-4-3","children":[]},{"level":3,"title":"1.4 Thinking 4.4","slug":"_1-4-thinking-4-4","link":"#_1-4-thinking-4-4","children":[]},{"level":3,"title":"1.5 Thinking 4.5","slug":"_1-5-thinking-4-5","link":"#_1-5-thinking-4-5","children":[]},{"level":3,"title":"1.6 Thinking 4.6","slug":"_1-6-thinking-4-6","link":"#_1-6-thinking-4-6","children":[]},{"level":3,"title":"1.7 Thinking 4.7","slug":"_1-7-thinking-4-7","link":"#_1-7-thinking-4-7","children":[]},{"level":3,"title":"1.8 Thinking 4.8","slug":"_1-8-thinking-4-8","link":"#_1-8-thinking-4-8","children":[]},{"level":3,"title":"1.9 Thinking 4.9","slug":"_1-9-thinking-4-9","link":"#_1-9-thinking-4-9","children":[]}]},{"level":2,"title":"2. 难点分析","slug":"_2-难点分析","link":"#_2-难点分析","children":[{"level":3,"title":"2.1 1-exam","slug":"_2-1-1-exam","link":"#_2-1-1-exam","children":[]},{"level":3,"title":"2.2 1-extra","slug":"_2-2-1-extra","link":"#_2-2-1-extra","children":[]},{"level":3,"title":"2.3 2-exam","slug":"_2-3-2-exam","link":"#_2-3-2-exam","children":[]},{"level":3,"title":"2.4 2-extra","slug":"_2-4-2-extra","link":"#_2-4-2-extra","children":[]}]},{"level":2,"title":"3. 实验体会","slug":"_3-实验体会","link":"#_3-实验体会","children":[]}],"git":{"createdTime":1726994140000,"updatedTime":1726994140000,"contributors":[{"name":"gitDebuger","email":"hygchn04@gmail.com","commits":1}]},"filePathRelative":"blogs/OS/lab4.md"}');export{i as comp,u as data};
