import{_ as n,c as a,e,o as p}from"./app-DWx6AsHO.js";const t={};function c(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="sysy-compiler" tabindex="-1"><a class="header-anchor" href="#sysy-compiler"><span>SysY Compiler</span></a></h1><h2 id="_1-project-overview" tabindex="-1"><a class="header-anchor" href="#_1-project-overview"><span>1. Project Overview</span></a></h2><h3 id="_1-1-what-is-this-project" tabindex="-1"><a class="header-anchor" href="#_1-1-what-is-this-project"><span>1.1 What is this project?</span></a></h3><p>This project is designed and developed as part of the compiler construction requirement for the &quot;Compiler Technology&quot; course at Beihang University (BUAA).</p><h3 id="_1-2-what-language-needs-to-be-translated" tabindex="-1"><a class="header-anchor" href="#_1-2-what-language-needs-to-be-translated"><span>1.2 What language needs to be translated?</span></a></h3><p>The compiler translates code written in <em><strong>SysY</strong></em> language (a subset of C language) into <em><strong>intermediate code</strong></em> or <em><strong>target code</strong></em>.</p><h3 id="_1-3-what-language-will-source-code-be-translated-into" tabindex="-1"><a class="header-anchor" href="#_1-3-what-language-will-source-code-be-translated-into"><span>1.3 What language will source code be translated into?</span></a></h3><p>Source code needs to be translated into <em><strong>intermediate code (LLVM IR Code or P-code)</strong></em> or <em><strong>target code (MIPS)</strong></em>.</p><h2 id="_2-summary-of-two-compilers" tabindex="-1"><a class="header-anchor" href="#_2-summary-of-two-compilers"><span>2. Summary of Two Compilers</span></a></h2><p>The course group provides two compilers (Pascal-Compiler and Pl0-Compiler) for reference. We need to read and analyze their source code, and then complete the overall architecture design of our own compiler based on this.</p><p>In this section, I will summarize the design philosophy of one of the two compilers, including but not limited to its overall structure, interface design, and file organization. The specific content is as follows.</p><h2 id="_3-overall-design-of-sysy-compiler" tabindex="-1"><a class="header-anchor" href="#_3-overall-design-of-sysy-compiler"><span>3. Overall Design of SysY Compiler</span></a></h2><p>The compiler is developed in Java and is divided into the front end and the back end. The front end is responsible for translating source code written in SysY language into LLVM intermediate code, and the back end is responsible for translating LLVM intermediate code into optimized MIPS assembly code. The following is a separate introduction to the front end and back end.</p><h3 id="_3-1-compiler-front-end" tabindex="-1"><a class="header-anchor" href="#_3-1-compiler-front-end"><span>3.1 Compiler Front End</span></a></h3><p>The front end of the compiler refers to the design of the syntax-directed translator in the Dragon Book of &quot;Compilers: Principles, Techniques, &amp; Tools&quot;. This translator includes two major functional components: the lexical analyzer and the syntax analyzer.</p><h4 id="_3-1-1-lexical-analyzer" tabindex="-1"><a class="header-anchor" href="#_3-1-1-lexical-analyzer"><span>3.1.1 Lexical Analyzer</span></a></h4><p>The lexical analyzer reads characters one by one from the input and outputs a stream of lexical units, which we call <code>Token</code> .</p><p>Lexical units consist of a terminal symbol and additional information appearing as an attribute value. In the specific design, the lexical unit corresponding to the class <code>Token</code> will be designed as an abstract class. Different lexical units, such as keywords and identifiers, will be designed as specific classes inherited from the <code>Token</code> class. A deeper inheritance tree can also be designed to achieve a more detailed classification of lexical units.</p><h4 id="_3-1-2-syntax-analyzer" tabindex="-1"><a class="header-anchor" href="#_3-1-2-syntax-analyzer"><span>3.1.2 Syntax Analyzer</span></a></h4><p>The syntax analyzer calls the lexical analyzer to extract lexical units from the source code, and then uses a top-down analysis method to build an abstract syntax tree and generate intermediate code.</p><p>During the syntax analysis process, the syntax analyzer will establish a symbol table to save various information about the construction of the source program. We will create a separate symbol table for each program block to achieve scope. The implementation of the symbol table for the program block utilizes the nearest nesting rule of the scope, so that all symbol tables will be linked together to form a tree structure.</p><p>Since we are using a syntax-directed translation scheme, we need to add semantic actions to the original grammar to generate intermediate code while creating the abstract syntax tree. Because these two tasks are carried out simultaneously, we do not need to create a data structure to store the entire abstract syntax tree, as long as the part of the abstract syntax tree that needs to be used when generating intermediate code is available.</p><p>In addition, the compilation process also needs to carry out a series of consistency checks, known as static checks, including syntax checks and type checks. These requirements are not included in the grammar and cannot be directly constrained by the grammar.</p><h3 id="_3-2-compiler-back-end" tabindex="-1"><a class="header-anchor" href="#_3-2-compiler-back-end"><span>3.2 Compiler Back End</span></a></h3><p>The back end of the compiler is responsible for translating LLVM intermediate code into optimized MIPS assembly code. The specific implementation plan is under research.</p><h2 id="_4-lexical-analysis-design" tabindex="-1"><a class="header-anchor" href="#_4-lexical-analysis-design"><span>4. Lexical Analysis Design</span></a></h2><h3 id="_4-1-class-design" tabindex="-1"><a class="header-anchor" href="#_4-1-class-design"><span>4.1 Class Design</span></a></h3><h4 id="_4-1-1-lexical-unit-class" tabindex="-1"><a class="header-anchor" href="#_4-1-1-lexical-unit-class"><span>4.1.1 Lexical Unit Class</span></a></h4><p>As mentioned earlier, all lexical units are objects of the abstract class <code>Token</code> .</p><p>To classify lexical units, we have derived seven specific lexical unit classes from the abstract class <code>Token</code> , each representing a type of lexical unit.</p><p>However, this classification scheme is too coarse, so we designed an enumeration class <code>Category</code> to represent more specific lexical unit classification information, with each lexical unit and its category code corresponding to an object of this enumeration class.</p><p>In addition, keywords and identifiers have many commonalities, and to distinguish identifiers from keywords in lexical analysis, we designed the <code>Word</code> interface, which both classes representing keywords and identifiers implement.</p><h4 id="_4-1-2-lexical-analyzer-main-class" tabindex="-1"><a class="header-anchor" href="#_4-1-2-lexical-analyzer-main-class"><span>4.1.2 Lexical Analyzer Main Class</span></a></h4><p>The class <code>Lexer</code> is designed as the main body of the lexical analyzer, which scans the source code and outputs a stream of lexical units.</p><p>In order to combine syntax analysis and lexical analysis work, this class includes a <code>nextToken</code> method that returns the next lexical unit object in the input stream. In the future, calling this method in the syntax analyzer will facilitate the syntax analysis work.</p><h4 id="_4-1-3-exception-class" tabindex="-1"><a class="header-anchor" href="#_4-1-3-exception-class"><span>4.1.3 Exception Class</span></a></h4><p>To handle lexical errors, syntax errors, and semantic errors that may exist in the source code, we have designed a custom exception class and an error type enumeration class.</p><p>At the current stage of lexical analysis, the enumeration class contains only one enumeration object, and later, the types of syntax errors and semantic errors will be added to this enumeration class.</p><h3 id="_4-2-project-structure" tabindex="-1"><a class="header-anchor" href="#_4-2-project-structure"><span>4.2 Project Structure</span></a></h3><h4 id="_4-2-1-file-structure" tabindex="-1"><a class="header-anchor" href="#_4-2-1-file-structure"><span>4.2.1 File Structure</span></a></h4><p>After the lexical analysis module is written, the file structure will be as follows:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">src</span>
<span class="line">├── Compiler.java</span>
<span class="line">├── config.json</span>
<span class="line">├── exception</span>
<span class="line">│   ├── CompilationException.java</span>
<span class="line">│   └── ExceptionCategory.java</span>
<span class="line">└── lexer</span>
<span class="line">    ├── Lexer.java</span>
<span class="line">    └── token</span>
<span class="line">        ├── Assistant.java</span>
<span class="line">        ├── Category.java</span>
<span class="line">        ├── CharConst.java</span>
<span class="line">        ├── Identifier.java</span>
<span class="line">        ├── IntConst.java</span>
<span class="line">        ├── Keyword.java</span>
<span class="line">        ├── Operator.java</span>
<span class="line">        ├── StringConst.java</span>
<span class="line">        ├── Token.java</span>
<span class="line">        └── Word.java</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-class-structure" tabindex="-1"><a class="header-anchor" href="#_4-2-2-class-structure"><span>4.2.2 Class Structure</span></a></h4><h5 id="_4-2-2-1-compiler-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-1-compiler-java"><span>4.2.2.1 <strong><code>Compiler.java</code></strong></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SOURCE_FILE</span> <span class="token operator">=</span> <span class="token string">&quot;testfile.txt&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LEXER_RESULT_FILE</span> <span class="token operator">=</span> <span class="token string">&quot;lexer.txt&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ERROR_FILE</span> <span class="token operator">=</span> <span class="token string">&quot;error.txt&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">lexerCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lexerCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-2-compilationexception-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-2-compilationexception-java"><span>4.2.2.2 <code>CompilationException.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">exception</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompilationException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> lineNumber<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExceptionCategory</span> category<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CompilationException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> lineNumber<span class="token punctuation">,</span> <span class="token class-name">ExceptionCategory</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLineNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ExceptionCategory</span> <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-3-exceptioncategory-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-3-exceptioncategory-java"><span>4.2.2.3 <code>ExceptionCategory.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">exception</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ExceptionCategory</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">IllegalSyntax</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> errorCode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ExceptionCategory</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-4-lexer-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-4-lexer-java"><span>4.2.2.4 <code>Lexer.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lexer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Word</span><span class="token punctuation">&gt;</span></span> words<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BufferedReader</span> reader<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> line<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> currentLine<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> forward<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">char</span> peek<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Lexer</span><span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Token</span> <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">CompilationException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CompilationException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reserveKeywords</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token class-name">Word</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">readChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-5-token-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-5-token-java"><span>4.2.2.5 <code>Token.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Token</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Category</span> category<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Token</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Category</span> <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-6-word-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-6-word-java"><span>4.2.2.6 <code>Word.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Word</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">getWordName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-7-identifier-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-7-identifier-java"><span>4.2.2.7 <code>Identifier.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Identifier</span> <span class="token keyword">extends</span> <span class="token class-name">Token</span> <span class="token keyword">implements</span> <span class="token class-name">Word</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> identifierName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Identifier</span><span class="token punctuation">(</span><span class="token class-name">String</span> identifierName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getIdentifierName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWordName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-8-intconst-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-8-intconst-java"><span>4.2.2.8 <code>IntConst.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntConst</span> <span class="token keyword">extends</span> <span class="token class-name">Token</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> origin<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">IntConst</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-9-charconst-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-9-charconst-java"><span>4.2.2.9 <code>CharConst.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharConst</span> <span class="token keyword">extends</span> <span class="token class-name">Token</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> origin<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CharConst</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-10-stringconst-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-10-stringconst-java"><span>4.2.2.10 <code>StringConst.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringConst</span> <span class="token keyword">extends</span> <span class="token class-name">Token</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> origin<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">StringConst</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-11-keyword-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-11-keyword-java"><span>4.2.2.11 <code>Keyword.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Keyword</span> <span class="token keyword">extends</span> <span class="token class-name">Token</span> <span class="token keyword">implements</span> <span class="token class-name">Word</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">MAIN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Main</span><span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">CONST</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Const</span><span class="token punctuation">,</span> <span class="token string">&quot;const&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">INT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Int</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">CHAR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Char</span><span class="token punctuation">,</span> <span class="token string">&quot;char&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">BREAK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Break</span><span class="token punctuation">,</span> <span class="token string">&quot;break&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">CONTINUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Continue</span><span class="token punctuation">,</span> <span class="token string">&quot;continue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">IF</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>If</span><span class="token punctuation">,</span> <span class="token string">&quot;if&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">ELSE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Else</span><span class="token punctuation">,</span> <span class="token string">&quot;else&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">FOR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>For</span><span class="token punctuation">,</span> <span class="token string">&quot;for&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">GET_INT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>GetInt</span><span class="token punctuation">,</span> <span class="token string">&quot;getint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">GET_CHAR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>GetChar</span><span class="token punctuation">,</span> <span class="token string">&quot;getchar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">PRINTF</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Printf</span><span class="token punctuation">,</span> <span class="token string">&quot;printf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">RETURN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Return</span><span class="token punctuation">,</span> <span class="token string">&quot;return&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span> <span class="token constant">VOID</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Void</span><span class="token punctuation">,</span> <span class="token string">&quot;void&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Keyword</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">KEYWORDS</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token constant">MAIN</span><span class="token punctuation">,</span> <span class="token constant">CONST</span><span class="token punctuation">,</span> <span class="token constant">INT</span><span class="token punctuation">,</span> <span class="token constant">CHAR</span><span class="token punctuation">,</span> <span class="token constant">BREAK</span><span class="token punctuation">,</span> <span class="token constant">CONTINUE</span><span class="token punctuation">,</span> <span class="token constant">IF</span><span class="token punctuation">,</span> <span class="token constant">ELSE</span><span class="token punctuation">,</span> <span class="token constant">FOR</span><span class="token punctuation">,</span> <span class="token constant">GET_INT</span><span class="token punctuation">,</span> <span class="token constant">GET_CHAR</span><span class="token punctuation">,</span> <span class="token constant">PRINTF</span><span class="token punctuation">,</span> <span class="token constant">RETURN</span><span class="token punctuation">,</span> <span class="token constant">VOID</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lexeme<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">,</span> <span class="token class-name">String</span> lexeme<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLexeme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWordName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-12-operator-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-12-operator-java"><span>4.2.2.12 <code>Operator.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Operator</span> <span class="token keyword">extends</span> <span class="token class-name">Token</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">PLUS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Plus</span><span class="token punctuation">,</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">MINUS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Minus</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">MULTIPLY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Multiply</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">DIVIDE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Divide</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">MOD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Mod</span><span class="token punctuation">,</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">AND</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>And</span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">OR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Or</span><span class="token punctuation">,</span> <span class="token string">&quot;||&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">NOT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Not</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">GREATER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Greater</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">LESS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Less</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">GREATER_EQUAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>GreaterEqual</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">LESS_EQUAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>LessEqual</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">EQUAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Equal</span><span class="token punctuation">,</span> <span class="token string">&quot;==&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">NOT_EQUAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>NotEqual</span><span class="token punctuation">,</span> <span class="token string">&quot;!=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Operator</span> <span class="token constant">ASSIGN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Assign</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> operator<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-13-assistant-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-13-assistant-java"><span>4.2.2.13 <code>Assistant.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Assistant</span> <span class="token keyword">extends</span> <span class="token class-name">Token</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Assistant</span> <span class="token constant">SEMICOLON</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Semicolon</span><span class="token punctuation">,</span> <span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Assistant</span> <span class="token constant">COMMA</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>Comma</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Assistant</span> <span class="token constant">LEFT_PARENTHESIS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>LeftParenthesis</span><span class="token punctuation">,</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Assistant</span> <span class="token constant">RIGHT_PARENTHESIS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>RightParenthesis</span><span class="token punctuation">,</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Assistant</span> <span class="token constant">LEFT_BRACKET</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>LeftBracket</span><span class="token punctuation">,</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Assistant</span> <span class="token constant">RIGHT_BRACKET</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>RightBracket</span><span class="token punctuation">,</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Assistant</span> <span class="token constant">LEFT_BRACE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>LeftBrace</span><span class="token punctuation">,</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Assistant</span> <span class="token constant">RIGHT_BRACE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category<span class="token punctuation">.</span>RightBrace</span><span class="token punctuation">,</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lexeme<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">,</span> <span class="token class-name">String</span> lexeme<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLexeme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-14-category-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-14-category-java"><span>4.2.2.14 <code>Category.java</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">lexer<span class="token punctuation">.</span>token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Ident</span><span class="token punctuation">(</span><span class="token string">&quot;IDENFR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IntConst</span><span class="token punctuation">(</span><span class="token string">&quot;INTCON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">StringConst</span><span class="token punctuation">(</span><span class="token string">&quot;STRCON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CharConst</span><span class="token punctuation">(</span><span class="token string">&quot;CHRCON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token string">&quot;MAINTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Const</span><span class="token punctuation">(</span><span class="token string">&quot;CONSTTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token string">&quot;INTTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Char</span><span class="token punctuation">(</span><span class="token string">&quot;CHARTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Break</span><span class="token punctuation">(</span><span class="token string">&quot;BREAKTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Continue</span><span class="token punctuation">(</span><span class="token string">&quot;CONTINUETK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">If</span><span class="token punctuation">(</span><span class="token string">&quot;IFTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Else</span><span class="token punctuation">(</span><span class="token string">&quot;ELSETK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Not</span><span class="token punctuation">(</span><span class="token string">&quot;NOT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">And</span><span class="token punctuation">(</span><span class="token string">&quot;AND&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Or</span><span class="token punctuation">(</span><span class="token string">&quot;OR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">For</span><span class="token punctuation">(</span><span class="token string">&quot;FORTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;GETINTTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">GetChar</span><span class="token punctuation">(</span><span class="token string">&quot;GETCHARTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;PRINTFTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Return</span><span class="token punctuation">(</span><span class="token string">&quot;RETURNTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Plus</span><span class="token punctuation">(</span><span class="token string">&quot;PLUS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Minus</span><span class="token punctuation">(</span><span class="token string">&quot;MINU&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Void</span><span class="token punctuation">(</span><span class="token string">&quot;VOIDTK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Multiply</span><span class="token punctuation">(</span><span class="token string">&quot;MULT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Divide</span><span class="token punctuation">(</span><span class="token string">&quot;DIV&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Mod</span><span class="token punctuation">(</span><span class="token string">&quot;MOD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Less</span><span class="token punctuation">(</span><span class="token string">&quot;LSS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">LessEqual</span><span class="token punctuation">(</span><span class="token string">&quot;LEQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Greater</span><span class="token punctuation">(</span><span class="token string">&quot;GRE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">GreaterEqual</span><span class="token punctuation">(</span><span class="token string">&quot;GEQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;EQL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">NotEqual</span><span class="token punctuation">(</span><span class="token string">&quot;NEQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Assign</span><span class="token punctuation">(</span><span class="token string">&quot;ASSIGN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Semicolon</span><span class="token punctuation">(</span><span class="token string">&quot;SEMICN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Comma</span><span class="token punctuation">(</span><span class="token string">&quot;COMMA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">LeftParenthesis</span><span class="token punctuation">(</span><span class="token string">&quot;LPARENT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">RightParenthesis</span><span class="token punctuation">(</span><span class="token string">&quot;RPARENT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">LeftBracket</span><span class="token punctuation">(</span><span class="token string">&quot;LBRACK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">RightBracket</span><span class="token punctuation">(</span><span class="token string">&quot;RBRACK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">LeftBrace</span><span class="token punctuation">(</span><span class="token string">&quot;LBRACE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">RightBrace</span><span class="token punctuation">(</span><span class="token string">&quot;RBRACE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> category<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token class-name">String</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-syntax-analysis-design" tabindex="-1"><a class="header-anchor" href="#_5-syntax-analysis-design"><span>5. Syntax Analysis Design</span></a></h2><p>The design of syntax analysis is to be written...</p><h2 id="_6-error-handling-design" tabindex="-1"><a class="header-anchor" href="#_6-error-handling-design"><span>6. Error Handling Design</span></a></h2><p>The design of error handling is to be written...</p><h2 id="_7-code-generation-design" tabindex="-1"><a class="header-anchor" href="#_7-code-generation-design"><span>7. Code Generation Design</span></a></h2><p>The design of code generation is to be written...</p><h2 id="_8-code-optimization-design" tabindex="-1"><a class="header-anchor" href="#_8-code-optimization-design"><span>8. Code Optimization Design</span></a></h2><p>The design of code optimization is to be written...</p>`,79)]))}const i=n(t,[["render",c],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/blogs/Compiler/","title":"BUAA Compiler Lab","lang":"en-US","frontmatter":{"title":"BUAA Compiler Lab","password":"6d209b4b4285cdb2e23773df5331bd07","categories":["Compiler"]},"headers":[{"level":2,"title":"1. Project Overview","slug":"_1-project-overview","link":"#_1-project-overview","children":[{"level":3,"title":"1.1 What is this project?","slug":"_1-1-what-is-this-project","link":"#_1-1-what-is-this-project","children":[]},{"level":3,"title":"1.2 What language needs to be translated?","slug":"_1-2-what-language-needs-to-be-translated","link":"#_1-2-what-language-needs-to-be-translated","children":[]},{"level":3,"title":"1.3 What language will source code be translated into?","slug":"_1-3-what-language-will-source-code-be-translated-into","link":"#_1-3-what-language-will-source-code-be-translated-into","children":[]}]},{"level":2,"title":"2. Summary of Two Compilers","slug":"_2-summary-of-two-compilers","link":"#_2-summary-of-two-compilers","children":[]},{"level":2,"title":"3. Overall Design of SysY Compiler","slug":"_3-overall-design-of-sysy-compiler","link":"#_3-overall-design-of-sysy-compiler","children":[{"level":3,"title":"3.1 Compiler Front End","slug":"_3-1-compiler-front-end","link":"#_3-1-compiler-front-end","children":[]},{"level":3,"title":"3.2 Compiler Back End","slug":"_3-2-compiler-back-end","link":"#_3-2-compiler-back-end","children":[]}]},{"level":2,"title":"4. Lexical Analysis Design","slug":"_4-lexical-analysis-design","link":"#_4-lexical-analysis-design","children":[{"level":3,"title":"4.1 Class Design","slug":"_4-1-class-design","link":"#_4-1-class-design","children":[]},{"level":3,"title":"4.2 Project Structure","slug":"_4-2-project-structure","link":"#_4-2-project-structure","children":[]}]},{"level":2,"title":"5. Syntax Analysis Design","slug":"_5-syntax-analysis-design","link":"#_5-syntax-analysis-design","children":[]},{"level":2,"title":"6. Error Handling Design","slug":"_6-error-handling-design","link":"#_6-error-handling-design","children":[]},{"level":2,"title":"7. Code Generation Design","slug":"_7-code-generation-design","link":"#_7-code-generation-design","children":[]},{"level":2,"title":"8. Code Optimization Design","slug":"_8-code-optimization-design","link":"#_8-code-optimization-design","children":[]}],"git":{"createdTime":1726994140000,"updatedTime":1727000227000,"contributors":[{"name":"gitDebuger","email":"hygchn04@gmail.com","commits":2}]},"filePathRelative":"blogs/Compiler/README.md"}');export{i as comp,u as data};
