import{_ as s,c as a,e as p,o as e}from"./app-BPTACKkd.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="lab6实验报告" tabindex="-1"><a class="header-anchor" href="#lab6实验报告"><span>Lab6实验报告</span></a></h1><h2 id="_1-思考题" tabindex="-1"><a class="header-anchor" href="#_1-思考题"><span>1. 思考题</span></a></h2><h3 id="_1-1-thinking-6-1" tabindex="-1"><a class="header-anchor" href="#_1-1-thinking-6-1"><span>1.1 Thinking 6.1</span></a></h3><p><strong>示例代码中，父进程操作管道的写端，子进程操作管道的读端。如果现在想让父进程作为“读者”，代码应当如何修改？</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> fildes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* buf size is 100 */</span></span>
<span class="line"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> status<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    status <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fildes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* an error occurred */</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token comment">/* Handle error */</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">/* Child - writes to pipe */</span></span>
<span class="line">            <span class="token function">close</span><span class="token punctuation">(</span>fildes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Read end is unused */</span></span>
<span class="line">            <span class="token function">write</span><span class="token punctuation">(</span>fildes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello world\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Write data on pipe */</span></span>
<span class="line">            <span class="token function">close</span><span class="token punctuation">(</span>fildes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Child will see EOF */</span></span>
<span class="line">            <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">/* Parent - reads from pipe */</span></span>
<span class="line">            <span class="token function">close</span><span class="token punctuation">(</span>fildes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Write end is unused */</span></span>
<span class="line">            <span class="token function">read</span><span class="token punctuation">(</span>fildes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Get data from pipe */</span></span>
<span class="line">            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent-process read:%s&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Print the data */</span></span>
<span class="line">            <span class="token function">close</span><span class="token punctuation">(</span>fildes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Finished with pipe */</span></span>
<span class="line">            <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是交换 <code>case 0</code> 和 <code>case 1</code> 处的代码。</p><h3 id="_1-2-thinking-6-2" tabindex="-1"><a class="header-anchor" href="#_1-2-thinking-6-2"><span>1.2 Thinking 6.2</span></a></h3><p><strong>上面这种不同步修改 <code>pp_ref</code> 而导致的进程竞争问题在 <code>user/lib/fd.c</code> 中的 <code>dup</code> 函数中也存在。请结合代码模仿上述情景，分析一下我们的 <code>dup</code> 函数中为什么会出现预想之外的情况？</strong></p><p><code>dup</code> 函数的功能是将文件描述符 <code>oldfdnum</code> 所对应的内容映射到文件描述符 <code>newfdnum</code> 中，会将 <code>oldfdnum</code> 和 <code>pipe</code> 的引用次数都增加 <code>1</code> ，将 <code>newfdnum</code> 的引用次数变为 <code>oldfdnum</code> 的引用次数。</p><p>当我们将一个管道的读/写端对应的文件描述符映射到另一个文件描述符。在进行映射之前，<code>f[0]</code> <code>f[1]</code> <code>pipe</code> 的引用次数分别为 <code>1</code> <code>1</code> <code>2</code> 。按照 <code>dup</code> 函数的执行顺序，会先将 <code>fd[0]</code> 引用次数 <code>+1</code> ，再将 <code>pipe</code> 引用次数 <code>+1</code> ，如果 <code>fd[0]</code> 的引用次数 <code>+1</code> 后恰好发生了一次时钟中断，进程切换后，另一进程调用 <code>_pipeisclosed</code> 函数判断管道写端是否关闭，此时 <code>pageref(fd[0]) == pageref(pipe) == 2</code> ，所以会误认为写端关闭，从而出现判断错误。</p><h3 id="_1-3-thinking-6-3" tabindex="-1"><a class="header-anchor" href="#_1-3-thinking-6-3"><span>1.3 Thinking 6.3</span></a></h3><p><strong>阅读上述材料并思考：为什么系统调用一定是原子操作呢？如果你觉得不是所有的系统调用都是原子操作，请给出反例。希望能结合相关代码进行分析说明。</strong></p><p>不只是系统调用，所有的异常处理函数都是原子操作。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token comment">/* 定义通用异常入口点 */</span></span>
<span class="line"><span class="token punctuation">.</span>section <span class="token punctuation">.</span>text<span class="token punctuation">.</span>exc_gen_entry</span>
<span class="line">exc_gen_entry<span class="token operator">:</span></span>
<span class="line">	<span class="token comment">/* 首先保存了所有寄存器的状态 */</span></span>
<span class="line">	SAVE_ALL</span>
<span class="line">	<span class="token comment">/* 重置了处理器的状态 */</span></span>
<span class="line">	<span class="token comment">/* 确保处理器处于内核模式并禁用了中断 */</span></span>
<span class="line">	<span class="token comment">/* 清除了状态寄存器中的用户模式 UM 位 */</span></span>
<span class="line">	<span class="token comment">/* 异常级别 EXL 位和全局中断使能 IE 位 */</span></span>
<span class="line">	mfc0    t0<span class="token punctuation">,</span> CP0_STATUS</span>
<span class="line">	and     t0<span class="token punctuation">,</span> t0<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span>STATUS_UM <span class="token operator">|</span> STATUS_EXL <span class="token operator">|</span> STATUS_IE<span class="token punctuation">)</span></span>
<span class="line">	mtc0    t0<span class="token punctuation">,</span> CP0_STATUS</span>
<span class="line">	<span class="token comment">/* 获取异常原因并跳转到相应的异常处理函数 */</span></span>
<span class="line">	mfc0    t0<span class="token punctuation">,</span> CP0_CAUSE</span>
<span class="line">	andi    t0<span class="token punctuation">,</span> <span class="token number">0x7c</span></span>
<span class="line">	lw      t0<span class="token punctuation">,</span> <span class="token function">exception_handlers</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span></span>
<span class="line">	jr      t0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是 <code>kern/entry.S</code> 中定义的通用异常入口点，在这里会禁用中断，从而避免再次触发异常处理，从而确保当前异常处理函数为原子操作。从而，所有的系统调用都是原子操作。</p><h3 id="_1-4-thinking-6-4" tabindex="-1"><a class="header-anchor" href="#_1-4-thinking-6-4"><span>1.4 Thinking 6.4</span></a></h3><p><strong>仔细阅读上面这段话，并思考下列问题：</strong></p><ul><li><strong>按照上述说法控制 <code>pipe_close</code> 中 <code>fd</code> 和 <code>pipe_unmap</code> 的顺序，是否可以解决上述场景的进程竞争问题？给出你的分析过程。</strong></li><li><strong>我们只分析了 <code>close</code> 时的情形，在 <code>fd.c</code> 中有一个 <code>dup</code> 函数，用于复制文件描述符。试想，如果要复制的文件描述符指向一个管道，那么是否会出现与 <code>close</code> 类似的问题？请模仿上述材料写写你的理解。</strong></li></ul><p>回答如下：</p><ul><li>可以解决。如果程序正常运行，那么 <code>pipe</code> 的 <code>pageref</code> 是要大于 <code>fd</code> 的，在执行 <code>unmap</code> 操作时，优先解除 <code>fd</code> 的映射，这样就可保证严格大于关系恒成立，即使发生了时钟中断，也不会出现运行错误。</li><li>同样的道理，在 <code>dup</code> 使引用次数增加时，先将 <code>pipe</code> 的引用次数增加，保证不会出现两者相等的情况。</li></ul><h3 id="_1-5-thinking-6-5" tabindex="-1"><a class="header-anchor" href="#_1-5-thinking-6-5"><span>1.5 Thinking 6.5</span></a></h3><p><strong>思考以下三个问题。</strong></p><ul><li><strong>认真回看Lab5文件系统相关代码，弄清打开文件的过程。</strong></li><li><strong>回顾Lab1与 Lab3，思考如何读取并加载 <code>ELF</code> 文件。</strong></li><li><strong>在Lab1中我们介绍了 <code>data</code> <code>text</code> <code>bss</code> 段及它们的含义，<code>data</code> 段存放初始化过的全局变量，<code>bss</code> 段存放未初始化的全局变量。关于 <code>memsize</code> 和 <code>filesize</code> ，我们在Note 1.3.4中也解释了它们的含义与特点。关于Note 1.3.4，注意其中关于“ <code>bss</code> 段并不在文件中占数据”表述的含义。回顾Lab3并思考：<code>elf_load_seg()</code> 和 <code>load_icode_mapper()</code> 函数是如何确保加载 <code>ELF</code> 文件时，<code>bss</code> 段数据被正确加载进虚拟内存空间。<code>bss</code> 段在 <code>ELF</code> 中并不占空间，但 <code>ELF</code> 加载进内存后，<code>bss</code> 段的数据占据了空间，并且初始值都是 <code>0</code> 。请回顾 <code>elf_load_seg()</code> 和 <code>load_icode_mapper()</code> 的实现，思考这一点是如何实现的？</strong></li></ul><p>回答如下：</p><ul><li><p>用户进程通过 <code>user/lib/file.c</code> 中的 <code>open</code> 函数完成打开文件操作。在该函数中，首先调用 <code>fd_alloc</code> 申请一个文件描述符，但是这里只是得到了可以作为文件描述符的地址，还没有实际的文件描述符数据。之后调用 <code>fsipc_open</code> ，该函数会将 <code>path</code> 对应的文件以 <code>mode</code> 的方式打开，将该文件的文件描述符共享到 <code>fd</code> 指针对应的地址处。</p><p>虽然获得了服务进程共享给用户进程的文件描述符，可文件的内容还没有被一同共享过来，接下来还需要使用 <code>fsipc_map</code> 进行映射。先做准备工作，通过 <code>fd2data</code> 获取文件内容应该映射到的地址；接着将文件所有的内容都从磁盘中映射到内存。</p><p>在最后，使用 <code>fd2num</code> 方法获取文件描述符在文件描述符数组中的索引，并将其返回给调用者。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">int</span> r<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Fd</span> <span class="token operator">*</span>fd<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 申请文件描述符</span></span>
<span class="line">	<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">fd_alloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 打开文件并将文件描述符共享到 fd 指针对应地址处</span></span>
<span class="line">	<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">fsipc_open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 映射文件内容</span></span>
<span class="line">	<span class="token keyword">char</span> <span class="token operator">*</span>va<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Filefd</span> <span class="token operator">*</span>ffd<span class="token punctuation">;</span></span>
<span class="line">	u_int size<span class="token punctuation">,</span> fileid<span class="token punctuation">;</span></span>
<span class="line">	va <span class="token operator">=</span> <span class="token function">fd2data</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	ffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Filefd</span> <span class="token operator">*</span><span class="token punctuation">)</span>fd<span class="token punctuation">;</span></span>
<span class="line">	size <span class="token operator">=</span> ffd<span class="token operator">-&gt;</span>f_file<span class="token punctuation">.</span>f_size<span class="token punctuation">;</span></span>
<span class="line">	fileid <span class="token operator">=</span> ffd<span class="token operator">-&gt;</span>f_fileid<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">+=</span> PTMAP<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">fsipc_map</span><span class="token punctuation">(</span>fileid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> va <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 返回索引</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token function">fd2num</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，还可以在 <code>mips_init</code> 函数中在操作系统初始化时创建初始进程，此时直接从宿主机中读取文件。</p></li><li><p>加载 <code>ELF</code> 文件主要是通过 <code>lib/elfloader.c</code> 中的 <code>elf_load_seg</code> 函数。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">int</span> <span class="token function">elf_load_seg</span><span class="token punctuation">(</span>Elf32_Phdr <span class="token operator">*</span>ph<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>bin<span class="token punctuation">,</span> <span class="token class-name">elf_mapper_t</span> map_page<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	u_long va <span class="token operator">=</span> ph<span class="token operator">-&gt;</span>p_vaddr<span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">size_t</span> bin_size <span class="token operator">=</span> ph<span class="token operator">-&gt;</span>p_filesz<span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">size_t</span> sgsize <span class="token operator">=</span> ph<span class="token operator">-&gt;</span>p_memsz<span class="token punctuation">;</span></span>
<span class="line">	u_int perm <span class="token operator">=</span> PTE_V<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>ph<span class="token operator">-&gt;</span>p_flags <span class="token operator">&amp;</span> PF_W<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		perm <span class="token operator">|=</span> PTE_D<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">/* 首先需要处理要加载的虚拟地址不与页对齐的情况 */</span></span>
<span class="line">	<span class="token comment">/* 将最开头不对齐的部分剪切下来先映射到内存的页中 */</span></span>
<span class="line">	<span class="token keyword">int</span> r<span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">size_t</span> i<span class="token punctuation">;</span></span>
<span class="line">	u_long offset <span class="token operator">=</span> va <span class="token operator">-</span> <span class="token function">ROUNDDOWN</span><span class="token punctuation">(</span>va<span class="token punctuation">,</span> PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">map_page</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> va<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> perm<span class="token punctuation">,</span> bin<span class="token punctuation">,</span></span>
<span class="line">				  <span class="token function">MIN</span><span class="token punctuation">(</span>bin_size<span class="token punctuation">,</span> PAGE_SIZE <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> r<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">/* 接着处理数据后面的部分 */</span></span>
<span class="line">	<span class="token comment">/* 通过循环不断将数据加载到页上。 */</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> offset <span class="token operator">?</span> <span class="token function">MIN</span><span class="token punctuation">(</span>bin_size<span class="token punctuation">,</span> PAGE_SIZE <span class="token operator">-</span> offset<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bin_size<span class="token punctuation">;</span> i <span class="token operator">+=</span> PAGE_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">map_page</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> va <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> perm<span class="token punctuation">,</span> bin <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>bin_size <span class="token operator">-</span> i<span class="token punctuation">,</span> PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span></span>
<span class="line">		    <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> r<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">/* 最后我们处理段大小大于数据大小的情况 */</span></span>
<span class="line">	<span class="token comment">/* 在这一部分我们不断创建新的页 */</span></span>
<span class="line">	<span class="token comment">/* 但是并不向其中加载任何内容 */</span></span>
<span class="line">	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sgsize<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">map_page</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> va <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> perm<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>sgsize <span class="token operator">-</span> i<span class="token punctuation">,</span> PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> r<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		i <span class="token operator">+=</span> PAGE_SIZE<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用该函数加载之前，还需要调用同文件中的 <code>elf_from</code> 函数检查要加载的文件是否为 <code>ELF</code> 文件。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">const</span> Elf32_Ehdr <span class="token operator">*</span><span class="token function">elf_from</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>binary<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">const</span> Elf32_Ehdr <span class="token operator">*</span>ehdr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Elf32_Ehdr <span class="token operator">*</span><span class="token punctuation">)</span>binary<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf32_Ehdr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ehdr<span class="token operator">-&gt;</span>e_ident<span class="token punctuation">[</span>EI_MAG0<span class="token punctuation">]</span> <span class="token operator">==</span> ELFMAG0 <span class="token operator">&amp;&amp;</span></span>
<span class="line">	    ehdr<span class="token operator">-&gt;</span>e_ident<span class="token punctuation">[</span>EI_MAG1<span class="token punctuation">]</span> <span class="token operator">==</span> ELFMAG1 <span class="token operator">&amp;&amp;</span> ehdr<span class="token operator">-&gt;</span>e_ident<span class="token punctuation">[</span>EI_MAG2<span class="token punctuation">]</span> <span class="token operator">==</span> ELFMAG2 <span class="token operator">&amp;&amp;</span></span>
<span class="line">	    ehdr<span class="token operator">-&gt;</span>e_ident<span class="token punctuation">[</span>EI_MAG3<span class="token punctuation">]</span> <span class="token operator">==</span> ELFMAG3 <span class="token operator">&amp;&amp;</span> ehdr<span class="token operator">-&gt;</span>e_type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> ehdr<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个函数的调用者为 <code>kern/env.c</code> 中的 <code>load_icode</code> 函数。</p></li><li><p>处理 <code>bss</code> 段的函数是Lab3中的 <code>load_icode_mapper</code> 。在这个函数中，我们要对 <code>bss</code> 段进行内存分配，但不进行初始化。当 <code>bin_size &lt; sgsize</code> 时，会将空位填 <code>0</code> ，在这段过程中为 <code>bss</code> 段的数据全部赋上了默认值 <code>0</code> 。</p></li></ul><h3 id="_1-6-thinking-6-6" tabindex="-1"><a class="header-anchor" href="#_1-6-thinking-6-6"><span>1.6 Thinking 6.6</span></a></h3><p><strong>通过阅读代码空白段的注释我们知道，将标准输入或输出定向到文件，需要我们将其 <code>dup</code> 到 <code>0</code> 或 <code>1</code> 号文件描述符。那么问题来了：在哪步 <code>0</code> 和 <code>1</code> 被安排为标准输入和标准输出？请分析代码执行流程，给出答案。</strong></p><p>在 <code>user/init.c</code> 中的 <code>main</code> 函数中有如下代码：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token comment">// other codes ...</span></span>
<span class="line"><span class="token comment">// stdin should be 0, because no file descriptors are open yet</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">opencons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">user_panic</span><span class="token punctuation">(</span><span class="token string">&quot;opencons: %d&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// stdout</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">user_panic</span><span class="token punctuation">(</span><span class="token string">&quot;dup: %d&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// other codes ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-thinking-6-7" tabindex="-1"><a class="header-anchor" href="#_1-7-thinking-6-7"><span>1.7 Thinking 6.7</span></a></h3><p><strong>在 <code>shell</code> 中执行的命令分为内置命令和外部命令。在执行内置命令时 <code>shell</code> 不需要 <code>fork</code> 一个子 <code>shell</code> ，如Linux系统中的 <code>cd</code> 命令。在执行外部命令时 <code>shell</code> 需要 <code>fork</code> 一个子 <code>shell</code> ，然后子 <code>shell</code> 去执行这条命令。</strong></p><p><strong>据此判断，在MOS中我们用到的 <code>shell</code> 命令是内置命令还是外部命令？请思考为什么Linux的 <code>cd</code> 命令是内部命令而不是外部命令？</strong></p><p>在MOS中，我们用到的 <code>shell</code> 命令是外部命令，需要 <code>fork</code> 一个子 <code>shell</code> 来执行命令。</p><p>Linux的 <code>cd</code> 指令是改变当前的工作目录，如果在子 <code>shell</code> 中执行，则改变的是子 <code>shell</code> 的工作目录，无法改变当前 <code>shell</code> 的工作目录。</p><h3 id="_1-8-thinking-6-8" tabindex="-1"><a class="header-anchor" href="#_1-8-thinking-6-8"><span>1.8 Thinking 6.8</span></a></h3><p><strong>在你的 <code>shell</code> 中输入命令 <code>ls.b | cat.b &gt; motd</code> 。</strong></p><p><strong>请问你可以在你的 <code>shell</code> 中观察到几次 <code>spawn</code> ？分别对应哪个进程？</strong></p><p><strong>请问你可以在你的 <code>shell</code> 中观察到几次进程销毁？分别对应哪个进程？</strong></p><p>执行结果如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line">$ ls.b <span class="token punctuation">|</span> cat.b <span class="token punctuation">&gt;</span> motd</span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00004003</span><span class="token punctuation">]</span> pipecreate</span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00005005</span><span class="token punctuation">]</span> destroying 00005005</span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00005005</span><span class="token punctuation">]</span> free env 00005005</span>
<span class="line">i am killed <span class="token punctuation">...</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00005806</span><span class="token punctuation">]</span> destroying 00005806</span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00005806</span><span class="token punctuation">]</span> free env 00005806</span>
<span class="line">i am killed <span class="token punctuation">...</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00004804</span><span class="token punctuation">]</span> destroying 00004804</span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00004804</span><span class="token punctuation">]</span> free env 00004804</span>
<span class="line">i am killed <span class="token punctuation">...</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00004003</span><span class="token punctuation">]</span> destroying 00004003</span>
<span class="line"><span class="token punctuation">[</span><span class="token number">00004003</span><span class="token punctuation">]</span> free env 00004003</span>
<span class="line">i am killed <span class="token punctuation">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里没有观察到 <code>spwan</code> ，进程销毁次数为 <code>4</code> 。</p><h2 id="_2-难点分析" tabindex="-1"><a class="header-anchor" href="#_2-难点分析"><span>2. 难点分析</span></a></h2><p>这部分实验的核心在于 <code>user/lib/pipe.c</code> 中与管道相关的函数。</p><p>首先是 <code>_pipe_is_closed</code> 函数，其中需要使用一个循环，不断进行 <code>env_runs</code> 的判断，直到稳定为止。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    runs <span class="token operator">=</span> env<span class="token operator">-&gt;</span>env_runs<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    fd_ref <span class="token operator">=</span> <span class="token function">pageref</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    pipe_ref <span class="token operator">=</span> <span class="token function">pageref</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>runs <span class="token operator">!=</span> env<span class="token operator">-&gt;</span>env_runs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是 <code>pipe_read</code> 函数，在 <code>p_rpos &gt;= p_wpos</code> 时不能立刻返回，而是应该根据 <code>_pipe_is_closed()</code> 的返回值判断管道是否关闭，若未关闭，应执行进程切换。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>p_rpos <span class="token operator">&gt;=</span> p<span class="token operator">-&gt;</span>p_wpos<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">_pipe_is_closed</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">syscall_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是 <code>pipe_write</code> 函数，同理在 <code>p_wpos - p_rpos &gt;= PIPE_SIZE</code> 时不能立刻返回，而是应该根据 <code>_pipe_is_closed()</code> 的返回值判断管道是否关闭，若未关闭，应执行进程切换。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>p_wpos <span class="token operator">-</span> p<span class="token operator">-&gt;</span>p_rpos <span class="token operator">&gt;=</span> PIPE_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_pipe_is_closed</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">syscall_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-实验体会" tabindex="-1"><a class="header-anchor" href="#_3-实验体会"><span>3. 实验体会</span></a></h2><p>这就是整个操作系统实验课的最后一部分了，~~我们成功体验到了从头搭建一个小操作系统的乐趣，~~至此，我们的操作系统虽然简单但是也还算完善，可以完成操作系统应该能够完成的大部分工作了。</p><p>在写下这篇实验报告时，操作系统理论课已经结束，实验课也就还有最后一次限时上机，期末考试也即将到来，我们真的要和操作系统课程说再见了。</p><p>回顾这一学期的操作系统课程，虽然内容很多，并且学得很累，但其实也还算有收获吧。不管怎么说吧，完结撒花！</p>`,53)]))}const i=s(t,[["render",c],["__file","lab6.html.vue"]]),u=JSON.parse('{"path":"/blogs/OS/lab6.html","title":"Lab6实验报告","lang":"en-US","frontmatter":{"categories":["OS"]},"headers":[{"level":2,"title":"1. 思考题","slug":"_1-思考题","link":"#_1-思考题","children":[{"level":3,"title":"1.1 Thinking 6.1","slug":"_1-1-thinking-6-1","link":"#_1-1-thinking-6-1","children":[]},{"level":3,"title":"1.2 Thinking 6.2","slug":"_1-2-thinking-6-2","link":"#_1-2-thinking-6-2","children":[]},{"level":3,"title":"1.3 Thinking 6.3","slug":"_1-3-thinking-6-3","link":"#_1-3-thinking-6-3","children":[]},{"level":3,"title":"1.4 Thinking 6.4","slug":"_1-4-thinking-6-4","link":"#_1-4-thinking-6-4","children":[]},{"level":3,"title":"1.5 Thinking 6.5","slug":"_1-5-thinking-6-5","link":"#_1-5-thinking-6-5","children":[]},{"level":3,"title":"1.6 Thinking 6.6","slug":"_1-6-thinking-6-6","link":"#_1-6-thinking-6-6","children":[]},{"level":3,"title":"1.7 Thinking 6.7","slug":"_1-7-thinking-6-7","link":"#_1-7-thinking-6-7","children":[]},{"level":3,"title":"1.8 Thinking 6.8","slug":"_1-8-thinking-6-8","link":"#_1-8-thinking-6-8","children":[]}]},{"level":2,"title":"2. 难点分析","slug":"_2-难点分析","link":"#_2-难点分析","children":[]},{"level":2,"title":"3. 实验体会","slug":"_3-实验体会","link":"#_3-实验体会","children":[]}],"git":{"createdTime":1726994140000,"updatedTime":1726994140000,"contributors":[{"name":"gitDebuger","email":"hygchn04@gmail.com","commits":1}]},"filePathRelative":"blogs/OS/lab6.md"}');export{i as comp,u as data};
