import{_ as n,c as a,e,o as p}from"./app-CNYnZXky.js";const t={};function c(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="lab5实验报告" tabindex="-1"><a class="header-anchor" href="#lab5实验报告"><span>Lab5实验报告</span></a></h1><h2 id="_1-思考题" tabindex="-1"><a class="header-anchor" href="#_1-思考题"><span>1. 思考题</span></a></h2><h3 id="_1-1-thinking-5-1" tabindex="-1"><a class="header-anchor" href="#_1-1-thinking-5-1"><span>1.1 Thinking 5.1</span></a></h3><p><strong>如果通过 <code>kseg0</code> 读写设备，那么对于设备的写入会缓存到Cache中。这是一种错误的行为，在实际编写代码的时候这么做会引发不可预知的问题。请思考：这么做这会引发什么问题？对于不同种类的设备（如我们提到的串口设备和IDE磁盘）的操作会有差异吗？可以从缓存的性质和缓存更新的策略来考虑。</strong></p><p>对于写入操作，在采用Write-Back刷新策略时，写入数据只有在Cache被换出时才会进行写回，导致后面的操作覆盖了前面的操作，只进行最后一次操作；对于串口设备，只有Cache刷新后才能看到输出，且只能看到最后一个字符；类似的，对于IDE磁盘可能只会写入最后一个扇区。</p><p>对于读取操作，任何一种策略都可能会读取到过时的数据，因此产生错误。</p><h3 id="_1-2-thinking-5-2" tabindex="-1"><a class="header-anchor" href="#_1-2-thinking-5-2"><span>1.2 Thinking 5.2</span></a></h3><p><strong>查找代码中的相关定义，试回答一个磁盘块中最多能存储多少个文件控制块？一个目录下最多能有多少个文件？我们的文件系统支持的单个文件最大为多大？</strong></p><p>在 <code>user/lib/fs.h</code> 中有如下定义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token comment">// Bytes per file system block - same as page size</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCK_SIZE</span> <span class="token expression">PAGE_SIZE</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCK_SIZE_BIT</span> <span class="token expression"><span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Maximum size of a filename (a single path component), including null</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXNAMELEN</span> <span class="token expression"><span class="token number">128</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Maximum size of a complete pathname, including null</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXPATHLEN</span> <span class="token expression"><span class="token number">1024</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Number of (direct) block pointers in a File descriptor</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NDIRECT</span> <span class="token expression"><span class="token number">10</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINDIRECT</span> <span class="token expression"><span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXFILESIZE</span> <span class="token expression"><span class="token punctuation">(</span>NINDIRECT <span class="token operator">*</span> BLOCK_SIZE<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE_STRUCT_SIZE</span> <span class="token expression"><span class="token number">256</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">char</span> f_name<span class="token punctuation">[</span>MAXNAMELEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// filename</span></span>
<span class="line">	<span class="token class-name">uint32_t</span> f_size<span class="token punctuation">;</span>	 <span class="token comment">// file size in bytes</span></span>
<span class="line">	<span class="token class-name">uint32_t</span> f_type<span class="token punctuation">;</span>	 <span class="token comment">// file type</span></span>
<span class="line">	<span class="token class-name">uint32_t</span> f_direct<span class="token punctuation">[</span>NDIRECT<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">uint32_t</span> f_indirect<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>f_dir<span class="token punctuation">;</span> <span class="token comment">// the pointer to the dir where this file is in, valid only in memory.</span></span>
<span class="line">	<span class="token keyword">char</span> f_pad<span class="token punctuation">[</span>FILE_STRUCT_SIZE <span class="token operator">-</span> MAXNAMELEN <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> NDIRECT<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>include/mmu.h</code> 中有如下定义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PAGE_SIZE</span> <span class="token expression"><span class="token number">4096</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>所以一个磁盘块最多能存储的文件控制块数量为 $\\frac{BLOCK_SIZE}{FILE_STRUCT_SIZE}=\\frac{4096}{256}=16$ 。</p><p>一个目录，也就是一个 <code>File</code> 结构体最多指向 <code>1024</code> 个磁盘块，一个磁盘块中最多有 <code>16</code> 个文件控制块，一个目录下最多有 $1024\\times16=16384$ 个文件。</p><p>同样的，一个 <code>File</code> 结构体最多指向 <code>1024</code> 个磁盘块，一个磁盘块的大小为 <code>4096</code> 字节，所以单个文件最大为 $1024\\times4096=2^{22}B=4MB$ 。</p><h3 id="_1-3-thinking-5-3" tabindex="-1"><a class="header-anchor" href="#_1-3-thinking-5-3"><span>1.3 Thinking 5.3</span></a></h3><p><strong>请思考，在满足磁盘块缓存的设计的前提下，我们实验使用的内核支持的最大磁盘大小是多少？</strong></p><p>在 <code>fs/serv.h</code> 中有如下代码：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token comment">/* Maximum disk size we can handle (1GB) */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISKMAX</span> <span class="token expression"><span class="token number">0x40000000</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们能支持的最大磁盘大小为 $1GB$ 。</p><h3 id="_1-4-thinking-5-4" tabindex="-1"><a class="header-anchor" href="#_1-4-thinking-5-4"><span>1.4 Thinking 5.4</span></a></h3><p><strong>在本实验中 <code>fs/serv.h</code> 和 <code>user/include/fs.h</code> 等文件中出现了许多宏定义，试列举你认为较为重要的宏定义，同时进行解释，并描述其主要应用之处。</strong></p><p>首先是 <code>fs/serv.h</code> 文件：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_DIRTY</span> <span class="token expression"><span class="token number">0x0004</span> </span><span class="token comment">// 文件系统块缓存被修改</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SECT_SIZE</span> <span class="token expression"><span class="token number">512</span> </span><span class="token comment">// 每磁盘块扇区字节数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SECT2BLK</span> <span class="token expression"><span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">/</span> SECT_SIZE<span class="token punctuation">)</span> </span><span class="token comment">// 扇区对应磁盘块</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISKMAP</span> <span class="token expression"><span class="token number">0x10000000</span> </span><span class="token comment">// 块缓存映射起始地址</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISKMAX</span> <span class="token expression"><span class="token number">0x40000000</span> </span><span class="token comment">// 能够支持的最大磁盘容量</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是 <code>user/include/fs.h</code> 文件：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token comment">// 每个文件系统块的大小——和页面大小相同</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCK_SIZE</span> <span class="token expression">PAGE_SIZE</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCK_SIZE_BIT</span> <span class="token expression"><span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件名的最大长度</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXNAMELEN</span> <span class="token expression"><span class="token number">128</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 路径的最大长度</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXPATHLEN</span> <span class="token expression"><span class="token number">1024</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件控制块中直接块指针个数</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NDIRECT</span> <span class="token expression"><span class="token number">10</span></span></span></span>
<span class="line"><span class="token comment">// 文件控制块中非直接块指针个数</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINDIRECT</span> <span class="token expression"><span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 最大文件大小</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXFILESIZE</span> <span class="token expression"><span class="token punctuation">(</span>NINDIRECT <span class="token operator">*</span> BLOCK_SIZE<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件控制块结构体大小</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE_STRUCT_SIZE</span> <span class="token expression"><span class="token number">256</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件转磁盘块</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE2BLK</span> <span class="token expression"><span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">File</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件类型</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FTYPE_REG</span> <span class="token expression"><span class="token number">0</span> </span><span class="token comment">// 普通文件</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FTYPE_DIR</span> <span class="token expression"><span class="token number">1</span> </span><span class="token comment">// 目录文件</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件系统超级块</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FS_MAGIC</span> <span class="token expression"><span class="token number">0x68286097</span> </span><span class="token comment">// 魔数</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-thinking-5-5" tabindex="-1"><a class="header-anchor" href="#_1-5-thinking-5-5"><span>1.5 Thinking 5.5</span></a></h3><p><strong>在Lab4“系统调用与 <code>fork</code> ”的实验中我们实现了极为重要的 <code>fork</code> 函数。那么 <code>fork</code> 前后的父子进程是否会共享文件描述符和定位指针呢？请在完成上述练习的基础上编写一个程序进行验证。</strong></p><p>编写如下的测试代码：</p><p><img src="https://github.com/gitDebuger/2024-os-lab/blob/documents/pic/5-5-code.png" alt="5-5-code"></p><p>运行结果如下：</p><p><img src="https://github.com/gitDebuger/2024-os-lab/blob/documents/pic/5-5-result.png" alt="5-5-result"></p><p>说明 <code>fork</code> 前后的父子进程会共享文件描述符和定位指针。</p><h3 id="_1-6-thinking-5-6" tabindex="-1"><a class="header-anchor" href="#_1-6-thinking-5-6"><span>1.6 Thinking 5.6</span></a></h3><p><strong>请解释 <code>File</code> <code>Fd</code> <code>Filefd</code> 结构体及其各个域的作用。比如各个结构体会在哪些过程中被使用，是否对应磁盘上的物理实体还是单纯的内存数据等。说明形式自定，要求简洁明了，可大致勾勒出文件系统数据结构与物理实体的对应关系与设计框架。</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">char</span> f_name<span class="token punctuation">[</span>MAXNAMELEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 文件名</span></span>
<span class="line">	<span class="token class-name">uint32_t</span> f_size<span class="token punctuation">;</span>	 <span class="token comment">// 文件以字节为单位的大小</span></span>
<span class="line">	<span class="token class-name">uint32_t</span> f_type<span class="token punctuation">;</span>	 <span class="token comment">// 文件类型</span></span>
<span class="line">	<span class="token class-name">uint32_t</span> f_direct<span class="token punctuation">[</span>NDIRECT<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 直接磁盘块指针</span></span>
<span class="line">	<span class="token class-name">uint32_t</span> f_indirect<span class="token punctuation">;</span> <span class="token comment">// 间接磁盘块指针</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>f_dir<span class="token punctuation">;</span> <span class="token comment">// 指向文件所在目录且仅在内存中有效</span></span>
<span class="line">	<span class="token keyword">char</span> f_pad<span class="token punctuation">[</span>FILE_STRUCT_SIZE <span class="token operator">-</span> MAXNAMELEN <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> NDIRECT<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用于内存对齐</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// file descriptor</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Fd</span> <span class="token punctuation">{</span></span>
<span class="line">	u_int fd_dev_id<span class="token punctuation">;</span> <span class="token comment">// 外设 id 即外设类型</span></span>
<span class="line">	u_int fd_offset<span class="token punctuation">;</span> <span class="token comment">// 读写偏移量</span></span>
<span class="line">	u_int fd_omode<span class="token punctuation">;</span> <span class="token comment">// 文件打开方式</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// file descriptor + file</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Filefd</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">Fd</span> f_fd<span class="token punctuation">;</span> <span class="token comment">// 文件描述符</span></span>
<span class="line">	u_int f_fileid<span class="token punctuation">;</span> <span class="token comment">// 文件自身 id</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">File</span> f_file<span class="token punctuation">;</span> <span class="token comment">// 文件本身</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-thinking-5-7" tabindex="-1"><a class="header-anchor" href="#_1-7-thinking-5-7"><span>1.7 Thinking 5.7</span></a></h3><p><strong>图中有多种不同形式的箭头，请解释这些不同箭头的差别，并思考我们的操作系统是如何实现对应类型的进程间通信的。</strong></p><p><img src="https://github.com/gitDebuger/2024-os-lab/blob/documents/pic/file-system.png" alt="file-system"></p><p>我们的进程通过和 <code>file_server</code> 这个进程的通信来操作文件。</p><p>在用户进程中，通过 <code>user/file.c</code> 中的函数操作文件系统，在这些用户接口函数中，调用了 <code>user/fsipc.c</code> 中的函数，从而通过 <code>user/fsipc.c</code> 中的这些函数与文件系统进行了通信。在文件系统进程中，初始化完成后将运行 <code>serve</code> 函数，在这个函数中，调用了 <code>ipc_recv</code> ，通过返回值的不同，在 <code>switch...case</code> 语句块中跳转到不同的函数，从而完成通信。</p><h2 id="_2-难点分析" tabindex="-1"><a class="header-anchor" href="#_2-难点分析"><span>2. 难点分析</span></a></h2><p>本次实验代码量巨大，为理解其逻辑关系以及编写练习带来了巨大的困难。</p><p>这部分代码主要分为三部分：</p><ul><li>外设控制：设备读写系统调用，IDE磁盘驱动。</li><li>文件系统：磁盘布局，文件系统数据结构，文件系统服务进程等。</li><li>文件系统接口：一系列用户库函数。</li></ul><p>这其中比较难理解的就是 <code>tools/fsformat.c</code> 这个文件，它会对磁盘镜像进行格式化，建立初始的文件系统，同时将宿主机的文件复制到这个磁盘镜像中，以便其他操作的继续进行。可以说，这个格式化程序是整个实验的基础。</p><p>在Lab5-2-exam中，需要实现一个递归复制某目录到另一个目录的功能，核心代码如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token keyword">int</span> <span class="token function">copy_file_content</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>dst<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">void</span> <span class="token operator">*</span>src_blk<span class="token punctuation">,</span> <span class="token operator">*</span>dst_blk<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">int</span> r<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">int</span> nblock<span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">// Calculate the total number of blocks in the source file.</span></span>
<span class="line">	nblock <span class="token operator">=</span> <span class="token function">ROUND</span><span class="token punctuation">(</span>src<span class="token operator">-&gt;</span>f_size<span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token operator">/</span> BLOCK_SIZE<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">(</span>u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nblock<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// Lab 5-2-Exam: Your code here. (3/6)</span></span>
<span class="line">		<span class="token comment">// debugf(&quot;OK&quot;);</span></span>
<span class="line">		<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">file_get_block</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>src_blk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">file_get_block</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dst_blk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">// debugf(&quot;OK&quot;);</span></span>
<span class="line">		<span class="token function">memcpy</span><span class="token punctuation">(</span>dst_blk<span class="token punctuation">,</span> src_blk<span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">file_dirty</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> i <span class="token operator">*</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">// Flush the changes to the destination file</span></span>
<span class="line">	<span class="token function">file_flush</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">copy_directory_contents</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>dst<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>dir_content<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">void</span> <span class="token operator">*</span>blk<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">int</span> r<span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">// Iterate over each block in the source directory</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">(</span>u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">ROUND</span><span class="token punctuation">(</span>src<span class="token operator">-&gt;</span>f_size<span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token operator">/</span> BLOCK_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">file_get_block</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>blk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> r<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		dir_content <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span><span class="token punctuation">)</span>blk<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> FILE2BLK<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>dir_content<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>f_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>dst_file<span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// Step1: Alloc dst_file using &#39;dir_alloc_file&#39;</span></span>
<span class="line">			<span class="token comment">// Lab 5-2-Exam: Your code here. (4/6)</span></span>
<span class="line">			<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">dir_alloc_file</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dst_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// Step2: Assign corresponding values of &#39;f_name&#39;, &#39;f_dir&#39;, &#39;f_size&#39;, &#39;f_type&#39; to dst_file</span></span>
<span class="line">			<span class="token function">strcpy</span><span class="token punctuation">(</span>dst_file<span class="token operator">-&gt;</span>f_name<span class="token punctuation">,</span> dir_content<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>f_name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			dst_file<span class="token operator">-&gt;</span>f_dir <span class="token operator">=</span> dst<span class="token punctuation">;</span></span>
<span class="line">			dst_file<span class="token operator">-&gt;</span>f_size <span class="token operator">=</span> dir_content<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>f_size<span class="token punctuation">;</span></span>
<span class="line">			dst_file<span class="token operator">-&gt;</span>f_type <span class="token operator">=</span> dir_content<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>f_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">			<span class="token comment">// Step3: Invoke either &#39;copy_directory_contents&#39; or &#39;copy_file_content&#39;,</span></span>
<span class="line">			<span class="token comment">// depending on the value of &#39;f_type&#39;.</span></span>
<span class="line">			<span class="token comment">// Lab 5-2-Exam: Your code here. (5/6)</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>dst_file<span class="token operator">-&gt;</span>f_type <span class="token operator">==</span> FTYPE_DIR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">copy_directory_contents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir_content<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dst_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dst_file<span class="token operator">-&gt;</span>f_type <span class="token operator">==</span> FTYPE_REG<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token function">try</span><span class="token punctuation">(</span><span class="token function">copy_file_content</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir_content<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dst_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">file_flush</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">directory_copy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>src_path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>dst_path<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">struct</span> <span class="token class-name">File</span> <span class="token operator">*</span>src_dir<span class="token punctuation">,</span> <span class="token operator">*</span>dst_dir<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">int</span> r<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">file_open</span><span class="token punctuation">(</span>src_path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>src_dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> r<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">file_create</span><span class="token punctuation">(</span>dst_path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dst_dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> r<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	dst_dir<span class="token operator">-&gt;</span>f_type <span class="token operator">=</span> FTYPE_DIR<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token function">copy_directory_contents</span><span class="token punctuation">(</span>src_dir<span class="token punctuation">,</span> dst_dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Lab5-2-extra中，需要为文件添加权限控制，并在需要的时候检测是否具有操作权限。同时，还需要实现修改文件权限的服务函数。由于本人这部分实验没有通过，且需要添加代码的位置分散且众多，这里就不再展示代码。</p><p>总的来说，这次实验难度很大，需要对整体框架和调用关系有清晰的认识。</p><h2 id="_3-实验体会" tabindex="-1"><a class="header-anchor" href="#_3-实验体会"><span>3. 实验体会</span></a></h2><p>本学期操作系统的上机实验到这里就要告一段落了，虽然说最后有一点小遗憾，但是整体结果还是不错的，就这样吧。</p><p><img src="https://github.com/gitDebuger/2024-os-lab/raw/documents/pic/result.png" alt="result"></p>`,53)]))}const i=n(t,[["render",c],["__file","lab5.html.vue"]]),r=JSON.parse('{"path":"/blogs/OS/lab5.html","title":"Lab5实验报告","lang":"en-US","frontmatter":{"categories":["OS"]},"headers":[{"level":2,"title":"1. 思考题","slug":"_1-思考题","link":"#_1-思考题","children":[{"level":3,"title":"1.1 Thinking 5.1","slug":"_1-1-thinking-5-1","link":"#_1-1-thinking-5-1","children":[]},{"level":3,"title":"1.2 Thinking 5.2","slug":"_1-2-thinking-5-2","link":"#_1-2-thinking-5-2","children":[]},{"level":3,"title":"1.3 Thinking 5.3","slug":"_1-3-thinking-5-3","link":"#_1-3-thinking-5-3","children":[]},{"level":3,"title":"1.4 Thinking 5.4","slug":"_1-4-thinking-5-4","link":"#_1-4-thinking-5-4","children":[]},{"level":3,"title":"1.5 Thinking 5.5","slug":"_1-5-thinking-5-5","link":"#_1-5-thinking-5-5","children":[]},{"level":3,"title":"1.6 Thinking 5.6","slug":"_1-6-thinking-5-6","link":"#_1-6-thinking-5-6","children":[]},{"level":3,"title":"1.7 Thinking 5.7","slug":"_1-7-thinking-5-7","link":"#_1-7-thinking-5-7","children":[]}]},{"level":2,"title":"2. 难点分析","slug":"_2-难点分析","link":"#_2-难点分析","children":[]},{"level":2,"title":"3. 实验体会","slug":"_3-实验体会","link":"#_3-实验体会","children":[]}],"git":{"createdTime":1726994140000,"updatedTime":1726994140000,"contributors":[{"name":"gitDebuger","email":"hygchn04@gmail.com","commits":1}]},"filePathRelative":"blogs/OS/lab5.md"}');export{i as comp,r as data};
